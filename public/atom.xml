<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Miks</title>
  <subtitle>Don‘t be a loser. Be a superloser.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ganbinwen.com/"/>
  <updated>2017-11-04T09:31:59.000Z</updated>
  <id>http://www.ganbinwen.com/</id>
  
  <author>
    <name>Miks</name>
    <email>binwengan@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>问题清单 Report</title>
    <link href="http://www.ganbinwen.com/2017/11/04/%E9%97%AE%E9%A2%98%E6%B8%85%E5%8D%95/"/>
    <id>http://www.ganbinwen.com/2017/11/04/问题清单/</id>
    <published>2017-11-04T07:27:45.000Z</published>
    <updated>2017-11-04T09:31:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下Git分支的知识</p>
<p>from sqlalchemy import Column, Integer, String</p>
<p>class User(Base):<br>…<br>tablename<br> = ‘users’<br>…<br>…     id = Column(Integer, primary_key=True)<br>…     name = Column(String)<br>…     fullname = Column(String)<br>…     password = Column(String)<br>…<br>…     def<br>repr<br>(self):<br>…        return “<br>“ % (<br>…                             self.name, self.fullname, self.password)</p>
<p>json.dumps()把python结构变成json， json.loads()反之 </p>
<p>TypeError: vars() argument must have<br>dict<br> attribute vars可以得到<br>dict<br>的属性值</p>
<p>list.extend(iterable)<br>Extend the list by appending all the items from the iterable. Equivalent to a[len(a):] = iterable.</p>
<p>from collections import deque ,<br>use deque<br>like a queue</p>
<p>如何使用sqlalchemy搭配scrapy 减少参数配置呢？？？</p>
<p>Counter 实例一个鲜为人知的特性是它们可以很容易的跟数学运算操作相结合。</p>
<p>how to realize keys option?</p>
<p>为什么同一个路径下搜索不到文件，pycharm中的terminal有问题，</p>
<p>绝对路径相对于文件还是运行位置的理解，看os源码理解。设计一套方法预先解决运行路径变更的问题。</p>
<p>为什么%s可以 但是{}会出问题？？</p>
<p>最后一个问题比较微妙，那就是一个函数需要测试某个可选参数是否被使用者传递进来。 这时候需要小心的是你不能用某个默认值比如None、 0或者False值来测试用户提供的值(因为这些值都是合法的值，是可能被用户传递进来的)。 因此，你需要其他的解决方案了。</p>
<p>为了解决这个问题，你可以创建一个独一无二的私有对象实例，就像上面的_no_value变量那样。 在函数里面，你可以通过检查被传递参数值跟这个实例是否一样来判断。 这里的思路是用户不可能去传递这个_no_value实例作为输入。 因此，这里通过检查这个值就能确定某个参数是否被传递进来了。<br>这里对 object() 的使用看上去有点不太常见。object 是python中所有类的基类。 你可以创建 object 类的实例，但是这些实例没什么实际用处，因为它并没有任何有用的方法， 也没有任何实例数据(因为它没有任何的实例字典，你甚至都不能设置任何属性值)。 你唯一能做的就是测试同一性。这个刚好符合我的要求，因为我在函数中就只是需要一个同一性的测试而已。</p>
<p>数据集我已经拥有？！！！！</p>
<p>我觉得LeakPasswd这个Project背后用的是类似华西安全网的APi.</p>
<p>google analytics</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理一下Git分支的知识&lt;/p&gt;
&lt;p&gt;from sqlalchemy import Column, Integer, String&lt;/p&gt;
&lt;p&gt;class User(Base):&lt;br&gt;…&lt;br&gt;tablename&lt;br&gt; = ‘users’&lt;br&gt;…&lt;br&gt;…    
    
    </summary>
    
    
      <category term="清单" scheme="http://www.ganbinwen.com/tags/%E6%B8%85%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程 Report</title>
    <link href="http://www.ganbinwen.com/2017/11/04/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://www.ganbinwen.com/2017/11/04/函数式编程/</id>
    <published>2017-11-04T07:27:45.000Z</published>
    <updated>2017-11-04T09:32:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>函数式编程<br>不依赖于外部的数据，而且也不改变外部数据的值，而是返回一个新的值给你<br>1）代码更简单了。<br>2）数据集，操作，返回值都放到了一起。<br>3）你在读代码的时候，没有了循环体，于是就可以少了些临时变量，以及变量倒来倒去逻辑。<br>4）你的代码变成了在描述你要干什么，而不是怎么去干</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;函数式编程&lt;br&gt;不依赖于外部的数据，而且也不改变外部数据的值，而是返回一个新的值给你&lt;br&gt;1）代码更简单了。&lt;br&gt;2）数据集，操作，返回值都放到了一起。&lt;br&gt;3）你在读代码的时候，没有了循环体，于是就可以少了些临时变量，以及变量倒来倒去逻辑。&lt;br&gt;4）你的代码变成
    
    </summary>
    
    
      <category term="函数式" scheme="http://www.ganbinwen.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>检查清单 Report</title>
    <link href="http://www.ganbinwen.com/2017/11/04/%E6%A3%80%E6%9F%A5%E6%B8%85%E5%8D%95/"/>
    <id>http://www.ganbinwen.com/2017/11/04/检查清单/</id>
    <published>2017-11-04T07:27:45.000Z</published>
    <updated>2017-11-04T09:31:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>写代码前</p>
<p>写代码的要思考到明确<br>做什么<br>，而不仅仅是<br>怎么做<br>。</p>
<p>先Google,gitHub看看有没有已经成熟的思路，先找资源。</p>
<p>把问题拆分到可以直接去思考做法的程度，画树，逐层写方法。</p>
<p>如果要去学习新的工具，应该直接学习底层封装的API，这样再次学习类似工具时，可以降低学习成本。</p>
<p>文件操作</p>
<p>操作文件时候，写路径的时候要用os模块操作，千万要避免文件换了一个位置就会出错的问题。</p>
<p>数据结构</p>
<p>注意可变对象和不可变对象（list和dict），防止做参数时被污染。</p>
<p>数据操作部分，先明确数据结构。能用Tuple解决的不用List，同时要注意Dict读数据是的时候是无序的。</p>
<p>对数据集有操作，一定要用Set，并集|，交集&amp;，差集-，对称差集^（项在t或s中，但不会同时出现在二者中）</p>
<p>检查需要</p>
<p>先检查输入类型，用isinstance去限定所需要的数据类型。</p>
<p>输入数据是Int，考虑变成float会怎么样。List,string,dict为空时都默认等于false。</p>
<p>数据库的操作是否已经最少了，如果不是最少的话，尝试用Innerjoin 连接出数据，避免多次查询。</p>
<p>用assert 来确定数据是可用的(assert A,B = if not A do B)</p>
<p>节约资源的方法</p>
<p>reduce，map，filter三个内置函数，返回的都是生成器。节约开销，能用时尽量用。</p>
<p>数据库操作</p>
<p>对数据库操作，不要再用mysql这个库，用sqlachemy，兼容2和3，同时可以用Orm来操作数据库。</p>
<p>对数据库操作的函数，如果可以写缓存，尽量用Redis做缓存，避免Mysql的查询。</p>
<p>尽量不要用Where这种隐形连接，用Inner Join这种显性连接。</p>
<p>对数据库有操作，要用log记录下来，以便数据恢复使用。</p>
<p>错误处理</p>
<p>死循环，给第一行print，第二行continue。</p>
<p>如果程序运行的路径，不能保证与.py文件是相同的，最好在里面open的时候使用绝对路径。 </p>
<p>团队沟通</p>
<p>换位思考，从对方的思路开始思考，先明白对方问题的原因。</p>
<p>不仅要有自己的想法，还要对于想法有可行的方案。</p>
<p>前端问题复杂的时候，后端要帮忙简化问题， 互相帮助！</p>
<p>HTML操作</p>
<p>w3lib.html.remove_tags()可以过滤Html标签。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写代码前&lt;/p&gt;
&lt;p&gt;写代码的要思考到明确&lt;br&gt;做什么&lt;br&gt;，而不仅仅是&lt;br&gt;怎么做&lt;br&gt;。&lt;/p&gt;
&lt;p&gt;先Google,gitHub看看有没有已经成熟的思路，先找资源。&lt;/p&gt;
&lt;p&gt;把问题拆分到可以直接去思考做法的程度，画树，逐层写方法。&lt;/p&gt;
&lt;p&gt;如果
    
    </summary>
    
    
      <category term="清单" scheme="http://www.ganbinwen.com/tags/%E6%B8%85%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>2017-08-20 Report</title>
    <link href="http://www.ganbinwen.com/2017/08/20/2017-08-20/"/>
    <id>http://www.ganbinwen.com/2017/08/20/2017-08-20/</id>
    <published>2017-08-20T07:27:45.000Z</published>
    <updated>2017-11-04T09:19:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>补交8月18日Daily Report<br>当天完成的工作内容<br>1.将车型数据库的爬虫脚本，打包成线上可以允许的程序。<br>当天的收获<br>1.问题： 如何让使用者在最短的时间内，做到同开发人员一样熟练的使用程序呢？<br>2.反思： 提供他人使用的程序，功能是核心。但是相比于自己使用的话，需要注意使用的友好程度，使用的上手难度，以及合作开发人员与后期维护人员的工作效率。<br>3.总结:<br>首先，<br>1.面向使用者来说，重要的是简单，易用。能用一行命令行执行的功能，绝不让使用者输入两行。比如数据库的建表，“是否要建表，建一张什么样的表..”这样的问题完成到使用者只需要指定Mysql,Sqlite此类的DBMS即可。 配有程序功能详细的Tutorial，毕竟我在Github上，对于使用越简单的程序，好感度越高！<br>2.面向合作开发人员，写好程序功能的架构图，让对方快速明白目前已经实现的功能，以及功能间的联系与使用技术。<br>明天的计划<br>1.先沟通好新人周报自动化的需求，然后再将可以完成需求的技术进行对比，择优选择。<br>提出疑问或寻求帮助<br>1.赵赵和伟哥有没有开发过一些自己觉得很酷Cool，但是用户的反馈并不好的程序呢？如果有，原因是什么呢？<br>今日翻译<br>“Mr. Jones, of the Manor Farm, had locked the hen-houses for the night, but was too drunk to remember to shut the popholes. With the ring of light from his lantern dancing from side to side, he lurched across the yard, kicked off his boots at the back door, drew himself a last glass of beer from the barrel in the scullerhey, and made his way up to bed, where Mrs. Jones was already snoring.”<br>我的翻译<br>Jones先生，是庄园的主人。这晚他锁上马棚，但是喝的太多了不记得去关上马槽。伴随着，晃来晃去从灯笼里发出的光亮。他蹒跚的穿过了庭院，用他的靴子踢开了后门。他给自己从桶里取了最后一杯酒，然后上了床。之后Jones先生已经开始打呼噜了。<br>正确翻译<br>故事发生在曼纳庄园里。这天晚上，庄园的主人琼斯先生说是已经锁好了鸡棚， 由于他喝得醉意十足，竟把里面的那些小门都忘了关上。他提着马灯踉踉跄跄地穿过院子，马灯光也跟着一直不停地晃来晃去，到了后门，他把靴子一脚一只踢了出去，又从洗碗间的酒桶里舀起最后一杯啤酒，一饮而尽，然后才上床休息。此时，床上的琼斯夫人已是鼾声如雷了。   </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;补交8月18日Daily Report&lt;br&gt;当天完成的工作内容&lt;br&gt;1.将车型数据库的爬虫脚本，打包成线上可以允许的程序。&lt;br&gt;当天的收获&lt;br&gt;1.问题： 如何让使用者在最短的时间内，做到同开发人员一样熟练的使用程序呢？&lt;br&gt;2.反思： 提供他人使用的程序，功能是
    
    </summary>
    
    
      <category term="daily report" scheme="http://www.ganbinwen.com/tags/daily-report/"/>
    
  </entry>
  
  <entry>
    <title>2017-08-18 Report</title>
    <link href="http://www.ganbinwen.com/2017/08/18/2017-08-18/"/>
    <id>http://www.ganbinwen.com/2017/08/18/2017-08-18/</id>
    <published>2017-08-18T07:27:45.000Z</published>
    <updated>2017-11-04T09:19:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>补交8月18日Daily Report<br>当天完成的工作内容<br>1.将车型数据库的爬虫脚本，打包成线上可以允许的程序。<br>当天的收获<br>1.问题： 如何让使用者在最短的时间内，做到同开发人员一样熟练的使用程序呢？<br>2.反思： 提供他人使用的程序，功能是核心。但是相比于自己使用的话，需要注意使用的友好程度，使用的上手难度，以及合作开发人员与后期维护人员的工作效率。<br>3.总结:<br>首先，<br>1.面向使用者来说，重要的是简单，易用。能用一行命令行执行的功能，绝不让使用者输入两行。比如数据库的建表，“是否要建表，建一张什么样的表..”这样的问题完成到使用者只需要指定Mysql,Sqlite此类的DBMS即可。 配有程序功能详细的Tutorial，毕竟我在Github上，对于使用越简单的程序，好感度越高！<br>2.面向合作开发人员，写好程序功能的架构图，让对方快速明白目前已经实现的功能，以及功能间的联系与使用技术。<br>明天的计划<br>1.先沟通好新人周报自动化的需求，然后再将可以完成需求的技术进行对比，择优选择。<br>提出疑问或寻求帮助<br>1.赵赵和伟哥有没有开发过一些自己觉得很酷Cool，但是用户的反馈并不好的程序呢？如果有，原因是什么呢？<br>今日翻译<br>“Mr. Jones, of the Manor Farm, had locked the hen-houses for the night, but was too drunk to remember to shut the popholes. With the ring of light from his lantern dancing from side to side, he lurched across the yard, kicked off his boots at the back door, drew himself a last glass of beer from the barrel in the scullerhey, and made his way up to bed, where Mrs. Jones was already snoring.”<br>我的翻译<br>Jones先生，是庄园的主人。这晚他锁上马棚，但是喝的太多了不记得去关上马槽。伴随着，晃来晃去从灯笼里发出的光亮。他蹒跚的穿过了庭院，用他的靴子踢开了后门。他给自己从桶里取了最后一杯酒，然后上了床。之后Jones先生已经开始打呼噜了。<br>正确翻译<br>故事发生在曼纳庄园里。这天晚上，庄园的主人琼斯先生说是已经锁好了鸡棚， 由于他喝得醉意十足，竟把里面的那些小门都忘了关上。他提着马灯踉踉跄跄地穿过院子，马灯光也跟着一直不停地晃来晃去，到了后门，他把靴子一脚一只踢了出去，又从洗碗间的酒桶里舀起最后一杯啤酒，一饮而尽，然后才上床休息。此时，床上的琼斯夫人已是鼾声如雷了。<br>当天完成的工作内容<br>1.update 合并数据的自动化脚本。<br>2.firestone的爬虫增加了特殊字符的处理，又获得了27015条车型数据。<br>当天的收获<br>1.问题： 不记录日志带来的麻烦<br>2.反思： firestone和edmunds的爬虫，在爬取的时候有数据调试，但是没有日志记录。这样在之后对数据进行验证的时候，没有信息可以参考。同时对于爬虫运行的状态无法确定。<br>3.方法： 对于自动化的脚本，要搭配日志使用。 在Settings模块里，配置Logger，爬取数据时将爬取结果写入日志中。在爬取结束后，核对日志，确保数据的完整性。<br>明天的计划<br>1.用日志确认Edmunds和Firestone的爬虫功能是否完善。<br>提出疑问或寻求帮助<br>无。<br>今日翻译<br>Notice that the weight of the position to the left of the units position is 8. This is 8 times 1. Then notice that the weight of the next position is 64, or 8 times 8. If another position existed, it would be 64 times 8, or 51 2. To find the weight of the next higher-order position, multiply the weight of the current position by the number base (or 8, in this example). To calculate the weights of position to the right of the radix point, divide by the number base. In the octal system, the position immediately to the fight of the octal point is 1/8, or .125. The next position is .125/8, or .015625, which can also be written as 1/64.<br>我的翻译<br>注意到个位的左边值是8。这是8的一次方。注意到下一个位置的值是64，或8的8次方。如果另一个位置存在，它将是64的8次方，或者512。为了找到下个高位的值，乘当前位置的基数（在这个例子中是8）为了计算出正确的指数位的值，除以基数。在八进制的中，八进制点的位置直接用1/8找到，或者.125。下一个位置是.125/8，或者.015625，也可以被写成1/64。<br>当天完成的工作内容<br>1.看avatar爬虫部分的源码。<br>当天的收获<br>1.当问题拆分后，如何思考解决方案？<br>总结： 问题要彼此不重合的独立拆开，同样，设想的解决方案也应该彼此不重合，只解决其对应的问题。解决方案只对应其当前问题，可以使逻辑保持清晰，做到更加专注的解决；降低方案的复杂性。<br>明天的计划<br>1.优化一下edmunds和firestone的爬虫，使其支持断点续爬。<br>提出疑问或寻求帮助<br>无。<br>今日翻译<br>The position to the left of the units position is always the number base raised to the first power; in a decimal system, this is l01, or l0. In a binary system, it is 21, or 2; and in an octal system it is 81, or 8. Therefore, an 11 decimal has a different value from an 11 binary. The 1l decimal is composed of 1 ten plus 1 unit and has a value of 11 units; while the binary number 11 is composed of 1 two plus 1 unit, for a value of 3 decimal units. The 11 octal has a value of 9 units.<br>我的翻译<br>在个位左边的位置总是数字的1次幂，在十进制中，101，或10。在二进制中21，或2。在八进制中为81，或8。因此，一个十进制的11不同于二进制的11的值。十进制中的11，由一个十位加1个单位，表示值11.然而二进制中的11，由一个二加1个单位，表示十进制中的3.八进制中11的值为9。<br>正确翻译<br>个位左边的位总是基数的1次幂，在十进制系统中是101，或10；在二进制中是21，或2；而在八进制中是81，或8。因此，十进制的11与二进制的11具有不同的数值。十进制11表示—个10加上一个1，其值为11；二进制11表示—个2加上—个1，其值为3；八进制11的值为9。<br>函数式编程<br>不依赖于外部的数据，而且也不改变外部数据的值，而是返回一个新的值给你<br>1）代码更简单了。<br>2）数据集，操作，返回值都放到了一起。<br>3）你在读代码的时候，没有了循环体，于是就可以少了些临时变量，以及变量倒来倒去逻辑。<br>4）你的代码变成了在描述你要干什么，而不是怎么去干<br>今晚耽误了很久，今天的总结并不好。<br>当天完成的工作内容<br>1.继续合并firestone和edmunds的数据库。<br>当天的收获<br>1.反馈：昨天总结的是有效解决问题中的拆分问题。今天在工作的时候，按照方法，把目标拆分成了十多个小节。这样逐个模块得解决，思路比以前清晰很多。<br>2.问题： 尽管思路清晰了一些，但是晚上重看思维导图的时候发现在拆分问题上，仍然存在问题。问题拆分的混乱，层级关系有些存在错误。<br>3.反思： 对于名称的合并上，有几类都是同一个问题下的子问题，但是在当时划分的时候我把它们划分到不同的类别中。 –&gt;  能够用统一的手段解决，变成了每个小问题都单独解决一次。 –&gt; 为什么当时问题没有归类正确？ ——&gt; 因为只带着目标去思考问题，没有在分析问题时，考虑它的对立/相似等其他情况。 –&gt; 忽略了这些思考，导致即使碰到了对立/相似的问题也会遗忘这类问题已经在某个地方被列出来过了。 ——&gt; 所以将它们放到了一个不是最匹配的类目下。<br>4.方法： 对于问题的拆分，带着目标的同时，也要将其能考虑到的对立/相似问题罗列出来 –&gt; 避免时间间隔久了，再碰到相似问题会重新定义。 –&gt; 罗列出来不必急着写解决方案，等遇到了在考虑，所以就算没有遇到也不会有时间浪费。<br>明天的计划<br>1.完成三张数据表完整的合并。<br>提出疑问或寻求帮助<br>无。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;补交8月18日Daily Report&lt;br&gt;当天完成的工作内容&lt;br&gt;1.将车型数据库的爬虫脚本，打包成线上可以允许的程序。&lt;br&gt;当天的收获&lt;br&gt;1.问题： 如何让使用者在最短的时间内，做到同开发人员一样熟练的使用程序呢？&lt;br&gt;2.反思： 提供他人使用的程序，功能是
    
    </summary>
    
    
      <category term="daily report" scheme="http://www.ganbinwen.com/tags/daily-report/"/>
    
  </entry>
  
  <entry>
    <title>2017-08-16 Report</title>
    <link href="http://www.ganbinwen.com/2017/08/16/2017-08-16/"/>
    <id>http://www.ganbinwen.com/2017/08/16/2017-08-16/</id>
    <published>2017-08-16T07:27:45.000Z</published>
    <updated>2017-11-04T09:19:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>当天完成的工作内容<br>1.update 合并数据的自动化脚本。<br>2.firestone的爬虫增加了特殊字符的处理，又获得了27015条车型数据。<br>当天的收获<br>1.问题： 不记录日志带来的麻烦<br>2.反思： firestone和edmunds的爬虫，在爬取的时候有数据调试，但是没有日志记录。这样在之后对数据进行验证的时候，没有信息可以参考。同时对于爬虫运行的状态无法确定。<br>3.方法： 对于自动化的脚本，要搭配日志使用。 在Settings模块里，配置Logger，爬取数据时将爬取结果写入日志中。在爬取结束后，核对日志，确保数据的完整性。<br>明天的计划<br>1.用日志确认Edmunds和Firestone的爬虫功能是否完善。<br>提出疑问或寻求帮助<br>无。<br>今日翻译<br>Notice that the weight of the position to the left of the units position is 8. This is 8 times 1. Then notice that the weight of the next position is 64, or 8 times 8. If another position existed, it would be 64 times 8, or 51 2. To find the weight of the next higher-order position, multiply the weight of the current position by the number base (or 8, in this example). To calculate the weights of position to the right of the radix point, divide by the number base. In the octal system, the position immediately to the fight of the octal point is 1/8, or .125. The next position is .125/8, or .015625, which can also be written as 1/64.<br>我的翻译<br>注意到个位的左边值是8。这是8的一次方。注意到下一个位置的值是64，或8的8次方。如果另一个位置存在，它将是64的8次方，或者512。为了找到下个高位的值，乘当前位置的基数（在这个例子中是8）为了计算出正确的指数位的值，除以基数。在八进制的中，八进制点的位置直接用1/8找到，或者.125。下一个位置是.125/8，或者.015625，也可以被写成1/64。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当天完成的工作内容&lt;br&gt;1.update 合并数据的自动化脚本。&lt;br&gt;2.firestone的爬虫增加了特殊字符的处理，又获得了27015条车型数据。&lt;br&gt;当天的收获&lt;br&gt;1.问题： 不记录日志带来的麻烦&lt;br&gt;2.反思： firestone和edmunds的爬虫，
    
    </summary>
    
    
      <category term="daily report" scheme="http://www.ganbinwen.com/tags/daily-report/"/>
    
  </entry>
  
  <entry>
    <title>2017-08-14 Report</title>
    <link href="http://www.ganbinwen.com/2017/08/14/2017-08-14/"/>
    <id>http://www.ganbinwen.com/2017/08/14/2017-08-14/</id>
    <published>2017-08-14T07:27:45.000Z</published>
    <updated>2017-11-04T09:19:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>当天完成的工作内容<br>1.看avatar爬虫部分的源码。<br>当天的收获<br>1.当问题拆分后，如何思考解决方案？<br>总结： 问题要彼此不重合的独立拆开，同样，设想的解决方案也应该彼此不重合，只解决其对应的问题。解决方案只对应其当前问题，可以使逻辑保持清晰，做到更加专注的解决；降低方案的复杂性。<br>明天的计划<br>1.优化一下edmunds和firestone的爬虫，使其支持断点续爬。<br>提出疑问或寻求帮助<br>无。<br>今日翻译<br>The position to the left of the units position is always the number base raised to the first power; in a decimal system, this is l01, or l0. In a binary system, it is 21, or 2; and in an octal system it is 81, or 8. Therefore, an 11 decimal has a different value from an 11 binary. The 1l decimal is composed of 1 ten plus 1 unit and has a value of 11 units; while the binary number 11 is composed of 1 two plus 1 unit, for a value of 3 decimal units. The 11 octal has a value of 9 units.<br>我的翻译<br>在个位左边的位置总是数字的1次幂，在十进制中，101，或10。在二进制中21，或2。在八进制中为81，或8。因此，一个十进制的11不同于二进制的11的值。十进制中的11，由一个十位加1个单位，表示值11.然而二进制中的11，由一个二加1个单位，表示十进制中的3.八进制中11的值为9。<br>正确翻译<br>个位左边的位总是基数的1次幂，在十进制系统中是101，或10；在二进制中是21，或2；而在八进制中是81，或8。因此，十进制的11与二进制的11具有不同的数值。十进制11表示—个10加上一个1，其值为11；二进制11表示—个2加上—个1，其值为3；八进制11的值为9。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当天完成的工作内容&lt;br&gt;1.看avatar爬虫部分的源码。&lt;br&gt;当天的收获&lt;br&gt;1.当问题拆分后，如何思考解决方案？&lt;br&gt;总结： 问题要彼此不重合的独立拆开，同样，设想的解决方案也应该彼此不重合，只解决其对应的问题。解决方案只对应其当前问题，可以使逻辑保持清晰，做到
    
    </summary>
    
    
      <category term="daily report" scheme="http://www.ganbinwen.com/tags/daily-report/"/>
    
  </entry>
  
  <entry>
    <title>2017-08-10 Report</title>
    <link href="http://www.ganbinwen.com/2017/08/10/2017-08-10/"/>
    <id>http://www.ganbinwen.com/2017/08/10/2017-08-10/</id>
    <published>2017-08-10T07:27:45.000Z</published>
    <updated>2017-11-04T09:19:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>今晚耽误了很久，今天的总结并不好。<br>当天完成的工作内容<br>1.继续合并firestone和edmunds的数据库。<br>当天的收获<br>1.反馈：昨天总结的是有效解决问题中的拆分问题。今天在工作的时候，按照方法，把目标拆分成了十多个小节。这样逐个模块得解决，思路比以前清晰很多。<br>2.问题： 尽管思路清晰了一些，但是晚上重看思维导图的时候发现在拆分问题上，仍然存在问题。问题拆分的混乱，层级关系有些存在错误。<br>3.反思： 对于名称的合并上，有几类都是同一个问题下的子问题，但是在当时划分的时候我把它们划分到不同的类别中。 –&gt;  能够用统一的手段解决，变成了每个小问题都单独解决一次。 –&gt; 为什么当时问题没有归类正确？ ——&gt; 因为只带着目标去思考问题，没有在分析问题时，考虑它的对立/相似等其他情况。 –&gt; 忽略了这些思考，导致即使碰到了对立/相似的问题也会遗忘这类问题已经在某个地方被列出来过了。 ——&gt; 所以将它们放到了一个不是最匹配的类目下。<br>4.方法： 对于问题的拆分，带着目标的同时，也要将其能考虑到的对立/相似问题罗列出来 –&gt; 避免时间间隔久了，再碰到相似问题会重新定义。 –&gt; 罗列出来不必急着写解决方案，等遇到了在考虑，所以就算没有遇到也不会有时间浪费。<br>明天的计划<br>1.完成三张数据表完整的合并。<br>提出疑问或寻求帮助<br>无。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今晚耽误了很久，今天的总结并不好。&lt;br&gt;当天完成的工作内容&lt;br&gt;1.继续合并firestone和edmunds的数据库。&lt;br&gt;当天的收获&lt;br&gt;1.反馈：昨天总结的是有效解决问题中的拆分问题。今天在工作的时候，按照方法，把目标拆分成了十多个小节。这样逐个模块得解决，思
    
    </summary>
    
    
      <category term="daily report" scheme="http://www.ganbinwen.com/tags/daily-report/"/>
    
  </entry>
  
  <entry>
    <title>2017-08-09 Report</title>
    <link href="http://www.ganbinwen.com/2017/08/09/2017-08-09/"/>
    <id>http://www.ganbinwen.com/2017/08/09/2017-08-09/</id>
    <published>2017-08-09T07:27:45.000Z</published>
    <updated>2017-11-04T09:19:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>当天完成的工作内容<br>1.爬取了firestone上的胎压数据。<br>2.合并了部分胎压数据到 edmunds的车型数据库中。<br>当天的收获<br>1.问题：如何快速有效的解决问题？（今日总结如何拆分问题）<br>2.陈述：这个问题在之前的daily report中也有过总结，但是从实践来看，效果并不好。之前总结的是先拆分–&gt;思考方案–&gt;验证方案–&gt;反馈–&gt;确认结果–&gt;问题解决。<br>3.目标： 我要做到快速有效的解决问题，而不是仅仅是解决问题。<br>4.反思： 之前总结的方案，从流程上来说解决问题确实是这些步骤，但是为什么效果不好呢？ ——&gt; 因为这些流程中每个步骤的细节没有总结 –&gt; 不总结到明确每个步骤做什么，那么总结的可行性会大大降低。 –&gt; 把这个流程中的步骤，都单独总结。 –&gt; 今天总结如何拆分问题。<br>5.总结： 面对问题时，比如今天的任务是合并两个部分兼容的车型数据库。 ——&gt; 先从目标考虑，目标是合并数据库。 ——&gt; 那么现在是否可以直接合并？如果是，那么直接合并了；如果不能合并，要怎么做才可以合并呢？ –&gt; 从目标上，把问题做了一次拆分。现在进入的是不可以直接合并模块 –&gt; 既然不可以合并，那是所有的数据都不可以合并，还是部分不可以合并？ –&gt; 是部分不可以直接合并，那么对于直接可以合并的数据也不要着急合并，继续进入部分数据不可以直接合并的思考 –&gt; 是什么导致了这部分的数据不可以直接合并呢？ ——&gt; 因为二者都有一部分数据是互不包含的，只有部分数据是二者的交集。 –&gt; 那么不包含意味着不能直接合并，那么交集中数据是不是已经可以直接合并了？ ——&gt; 交集中因为两个车型数据库的车型匹配规则不同，所以有部分数据虽然在交集内，但是仍然不能直接合并 –&gt; 规则相同或者不受规则影响的那部分是可以直接合并的，那么受到规则影响的数据是不是全部不可以直接合并？ –&gt; 思考到这一步的时候，需要开始实践才可以继续往下，此时才算把问题拆分到自己能考虑到的全部。<br>5.简述：总结的方法是对如何拆分问题做的实践，这个过程中，每一次的拆分都要先问此时能不能达到目标了，如果可以就开始思考方案和实践方案，如果仍然不能解决那么继续拆分并且之前的过程。<br>明天的计划<br>1.将firestone和edmunds二者可以合并的数据，合并完整。<br>提出疑问或寻求帮助<br>无。<br>今日翻译<br>The exponential powers of the positions are critical for understanding numbers in other numbering systems. The position to the left of the radix (number base) point, called a decimal point only in the decimal system, is always the units position in any number system. For example, the position to the left of the binary point is always 20 or 1; the position to the left of the octal point is 80 or 1. In any case, any number raised to its zero power is always 1, or the units position.<br>我的翻译<br>指数的位置幂可以被理解其他数值系统中的数字所借鉴。基数左边的位置的点被称为十进制点，只在十进制系统中有。个位总是在任何数值系统中。举个例子，二进制左边的位置总是20或者1，八进制左边的位置是80或者1。在任何地方，任意数字上方有0都表示1，或者个位位置。<br>正确翻译<br>位的指数幂在理解其他计数制中的数时是个关键。基数小数点，在十进制中称为十进制小数点，其左边的位在任何数制中都是个位。例如，二进制小数点左边的位是20或1。而八进制小数点左边的位是80或1。在任何情况下，任何数的零次幂总是1，或1个单位。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当天完成的工作内容&lt;br&gt;1.爬取了firestone上的胎压数据。&lt;br&gt;2.合并了部分胎压数据到 edmunds的车型数据库中。&lt;br&gt;当天的收获&lt;br&gt;1.问题：如何快速有效的解决问题？（今日总结如何拆分问题）&lt;br&gt;2.陈述：这个问题在之前的daily report
    
    </summary>
    
    
      <category term="daily report" scheme="http://www.ganbinwen.com/tags/daily-report/"/>
    
  </entry>
  
  <entry>
    <title>2017-08-08 Report</title>
    <link href="http://www.ganbinwen.com/2017/08/08/2017-08-08/"/>
    <id>http://www.ganbinwen.com/2017/08/08/2017-08-08/</id>
    <published>2017-08-08T07:27:45.000Z</published>
    <updated>2017-11-04T09:19:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>当天完成的工作内容<br>1.解析了firestonecompleteautocare这个网站的爬取规则，完成了车型的spider脚本。计划将其数据全部爬下来后再合并到已有的车型数据中。<br>当天的收获<br>1.问题： 业余时间的规划不清晰，无端的焦虑，效率也很低下。<br>2.反思： 每天总是想看的太多，比如想看python数据相关的包，又想看一些数据结构的教程，每天又有Github新的star，又把当天工作中遇到的代码问题弄懂…. –&gt; 总是觉得这些方方面面都挺重要，但是又不能兼顾。这些想的太多，不仅看不全而且还很焦虑。导致每天晚上每个部分只弄了一点，然后第二天起来又忘了，这样更加焦虑。最近心里越来越烦，越来越焦虑。 –&gt; 我也花了时间，但是效率非常低。 –&gt; 对学习计划，规划不清晰 –&gt; 把目标定的太长远了，没有规划好每天的计划。 –&gt; 应该用天来规划，而不是用周或者是月，因为工作期间的时间太碎片了，如果还按照学校那样一周一个安排，那这一周基本上什么也做不出来。 –&gt; 要把计划迭代的周期缩短，同时把想做的事情按照重要性来排序。<br>3.方法： 先把想做的事情按重要性做个排序。权衡了一番。<br>解决与思考工作上遇到的问题 &gt;&gt;  看scrapy的源码（每天只看一章） &gt;&gt; 看github里的star，技术博客等。 –&gt; 每天晚上就做这些简单清晰的事情，想做的太多反而焦虑。 –&gt; 任何没有反馈的学习是不可靠的 –&gt; fork scrapy，每天在看完的代码里面写注释即可。<br>明天的计划<br>1.把firestonecompleteautocare中的车型数据爬取下来。<br>2.对应firestonecompleteautocare的车型数据，爬取其对应的胎压数据。<br>提出疑问或寻求帮助<br>无。<br>今日翻译<br>Once the digits of a number system are understood, larger numbers are constructed by using positional notation. In grade school, we learned that the position to the left of the units position was the tens position, the position to the left of the tens position was the hundreds position, and so forth. (An example is the decimal number 132: This number has 1 hundred, 3 tens, and 2 units.) What probably was not learned was the exponential value of each position: The units position has a weight of 100 or 1; the tens position has weight of 101, or 10; and the hundreds position has a weight of 102, or 100.<br>我的翻译<br>一旦明白了数字的计数系统，就可以通过位置表示构造出更大的数字。在高中，我们学过个位的左边是十位，十位的左边是百位，以此类推。（举个十进制的132的例子，这个数字有1个百位，3个十位，2个个位）。可能没有学过指数的每个位置：个位的有一个重量10的0次方为1，十位有一个重量10的1一次方为10，百位的有一个重量10的2次方为100。<br>正确翻译<br>一旦我们理解了计数制的数字后，就可用位计数法构造更大的数值。在小学时我们都学过个位的左边一位是十位，十位左边一位是百位，以此类推(例如十进制数132,这个数字有—个百，三个十和两个一)。或许我们没有学过每个位的指数值：个位的权为l00，即1；十位的权为101或10；而百位的权为102或100。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当天完成的工作内容&lt;br&gt;1.解析了firestonecompleteautocare这个网站的爬取规则，完成了车型的spider脚本。计划将其数据全部爬下来后再合并到已有的车型数据中。&lt;br&gt;当天的收获&lt;br&gt;1.问题： 业余时间的规划不清晰，无端的焦虑，效率也很低下。&lt;
    
    </summary>
    
    
      <category term="daily report" scheme="http://www.ganbinwen.com/tags/daily-report/"/>
    
  </entry>
  
  <entry>
    <title>2017-08-07 Report</title>
    <link href="http://www.ganbinwen.com/2017/08/07/2017-08-07/"/>
    <id>http://www.ganbinwen.com/2017/08/07/2017-08-07/</id>
    <published>2017-08-07T07:27:45.000Z</published>
    <updated>2017-11-04T09:19:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>当天完成的工作内容<br>1.get features of car from edmunds<br>当天的收获<br>1.问题： 今天写代理池的时候，遇到了一个打开文件的路径问题。<br>2.反思： B是A文件的子目录，爬虫需要打开的代理文件和爬虫文件都在B中。 ——&gt; 在A中开始爬取就会有no find的问题，但是在B中爬取文件就没有问题。 –&gt; 那么既然运行的文件和目标文件都在同一个文件夹里，怎么会有这样的问题呢？ ——&gt; 用os.getcwd()做个测试，发现在A中运行B中的文件和B中直接运行得到的路径是不一样的 –&gt; 所以路径取决于运行文件的位置而不是文件所在的位置。<br>3.方法： 遇到no find file or directory的问题 ——&gt; 先检查一遍文件名的反斜杠，避免转义的问题。 –&gt; 文件名，如果使用相对路径，那么检查运行文件的位置时候是跟文件所处的路径相同。 –&gt; 如果路径不同，那么要修改文件名为运行的路径位置，或者使用绝对路径。<br>总结： 如果程序运行的路径，不能保证与.py文件是相同的，最好在里面open的时候使用绝对路径。<br>明天的计划<br>1.get tire pressure data。<br>提出疑问或寻求帮助<br>无。<br>今日翻译<br>If the base of a number exceeds 10, the additional digits use the letters of the alphabet, beginning with an A, For example, a base 12 number contains 12 digits: 0 through 9, followed by A for 10 and B for 11, Note that a base 10 number does not contain a 10 digit, just as a base 8 number does not contain an 8 digit. The most common numbering systems used with computers are decimal, binary, and hexadecimal (base 16). (Many years ago octal numbers were popular.) Each system is described and used in this section of the chapter.</p>
<p>我的翻译<br>如果基数超过10，那么10之后的数字使用字母，从A开始。举个例子，12进制包含12个数字，0到9，之后是A表示10，B表示11。注意10进制不包括10这个数字，就好像8进制没有8。最常使用的数字系统是十进制和十六进制（许多年以前流行八进制）。每一个系统被这个部分的章节使用和描述。<br>正确翻译<br>如果基数大于10，其余数字用从A开始的字母表示，例如，以12为基的数包含12个数字，0到9，之后用A代表10，B代表11。注意，以10为基的数不包含数字10，如同以8为基的数不包括数字8一样。计算机中最通用的计数制是十进制、二进制、八进制和十六进制(基为16)。每种计数制都将在本节中进行说明和应用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当天完成的工作内容&lt;br&gt;1.get features of car from edmunds&lt;br&gt;当天的收获&lt;br&gt;1.问题： 今天写代理池的时候，遇到了一个打开文件的路径问题。&lt;br&gt;2.反思： B是A文件的子目录，爬虫需要打开的代理文件和爬虫文件都在B中。 ——&amp;g
    
    </summary>
    
    
      <category term="daily report" scheme="http://www.ganbinwen.com/tags/daily-report/"/>
    
  </entry>
  
  <entry>
    <title>2017-08-06 Report</title>
    <link href="http://www.ganbinwen.com/2017/08/06/2017-08-06/"/>
    <id>http://www.ganbinwen.com/2017/08/06/2017-08-06/</id>
    <published>2017-08-06T07:27:45.000Z</published>
    <updated>2017-11-04T09:51:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>当天完成的工作内容<br>1.写了xxx api<br>2.在xxx中修改了xx方法。<br>当天的收获<br>1.今天在fix Bug的时候，被卡住了很久。这个bug是之前xxxx代码中xxxx部分隐含的，今天在扩展功能的时候暴露了出来。刚开始碰到这个问题的时候，首先我在文本里梳理了一遍解决问题的过程，完成了整个流程后我得到了一些关键性的数据，可是之后一直卡在了这个地方（有了关键数据，但是不知道怎么开始解决问题），想不到解决的办法后我把这个问题反馈给了伟哥。伟哥在对bug调试了一会后，跟我得到了相同的信息（截止到这一步，方法没有出现偏差），但是伟哥根据这些数据在纸上画出了整个问题中解决的流程，我看到了流程后感觉将之前所有的思路都理了一遍，并且之后我在重新绘图的过程中，突然想明白了Bug发生的原因（当时我跟伟哥说这是灵感乍现，但是回头想想为什么一开始不乍现而是等到绘图之后才有呢，所以这应该算是整个逻辑理顺后推出来的结果）。现在回头去看当时被卡住的情况，不是由于数据或者关键信息的缺失，而是没有把逻辑整理好，归纳出一个清晰的执行计划而导致的。<br>可见确保每一个目标都有清晰的执行计划和实践步骤是非常关键的<br>，遇到问题后先要用MECE分析一遍，再开始执行。<br>明天的计划<br>1.继续熟悉xxxxxx的架构。<br>提出疑问或寻求帮助<br>无。<br>当天完成的工作内容<br>1.写了一个xxxxxapi。<br>当天的收获<br>1.今天伟哥给我review的时候，跟我解释了在公司工作的目标和自己利用空余时间进行自我提升的协调。以及如何该使二者达到平衡，在公司要重视效率完成work，回去后把work中的原理去深究，每一次深究都是对自我的提升，只有用时间去钻研后才能做到消耗一次的时间解决相同的问题，避免在工作中每次碰到相同的问题都需要去重新思考一遍。<br>2.在伟哥的指点下，学习了MECE分析法，这个方法真的非常抑制我的坏习惯（行动快于思考），但是光理解不够，要将这个方法运用到实践中。明天将解决的问题的思路都在纸上用MECE过一遍。<br>明天的计划<br>1.继续熟悉avatar的架构。<br>提出疑问或寻求帮助<br>无。<br>今天感觉好疲惫，daily report没有用心写了QAQ</p>
<p>当天完成的工作内容<br>1.修复了xxxx前端和后端的几个小bug。<br>当天的收获<br>1.今天修复了几个关于前端的bug，其实对于前端的知识，我了解得很少。一开始听到伟哥给我的任务，完全没有思路，不过公司跟学校是完全不一样的，我不需要了解任务背后的原理，我只需要完成目标就好（不限制方法）。所以在解决问题上，我把解决的逻辑想明白后，代码具体操作的部分，去跟超哥请教，得以顺利的修复了Bug。<br>明天的计划<br>1.继续熟悉avatar数据处理部分的逻辑。<br>提出疑问或寻求帮助<br>无。</p>
<p>title: 《教父》摘录</p>
<p>date: 2017-06-10 00:11:12</p>
<p>tags:书中的一些笔记</p>
<p>他已经学会从不出言威胁，唐教会了他这一点，但卡洛完全明白了他的意思：他离死只差半步。 </p>
<p>就在这时，唐· 柯里昂发表了将被长久纪念的演说，巩固了他在众人中最具远见的领袖地位，演说充满逻辑常理，发自肺腑，切中要害。他在演说中创造了一个短语，日后像丘吉尔的“ 铁幕” 一样变得人尽皆知，但到十年后才进入公众视线。他第一次起身对委员会说话。他个子不高，因为“ 病况” 有点消瘦，六十岁的年龄终究显出了几分老态，但无疑已经恢复了过去的全部力量，仍旧拥有过去的所有智慧。“我们如果失去理性，那算是什么样的人啊，” 他说，“ 没有理性，我们和丛林野兽还有什么分别？但是，我们毕竟有理性，能够彼此说理，能够和自己说理。重新挑起所有争端，诉诸暴力和混战，能够满足我的什么目标呢？我的儿子死了，这是不幸，我必须承受，不能让我周围的世界随我一同受苦。因此，我今天说，我以名誉发誓，我不会寻求复仇，不会追查往事的前因后果。我将胸怀坦荡离开这里。“有一点我想说的是，我们必须看顾自己的利益。我们这些人都拒绝当傻瓜，拒绝当傀儡，被高处的人扯着线蹦蹦跳跳。我们在这个国家运气不错。我们的大部分子女已经过上了更好的生活。你们有些人的儿子是教授、科学家、音乐家—— 真是走运。你们的孙子也许会成为新的首领。我们谁都不希望见到儿孙走上我们的老路，那样过日子太艰难了。他们可以和其他人一样，我们的勇气赢来了他们的地位和安稳。我已经有了孙子，希望他们的孩子有朝一日能成为—— 谁知道呢？—— 州长？总统？在美国一切皆有可能。可是，我们必须跟着时代向前走。刀枪刺杀的年月已经过去。我们要像商人一样狡猾，从商的钱更多，对我们的儿孙更好。“至于我们的行为，我们不需要对那些炮筒子、那些首领负责，他们擅自决定我们该怎么处理我们的生命，他们宣战，希望我们用血肉保护他们的战果。我们凭什么为了保护他人的利益而伤害自己？而我们看顾我们自己的利益，他们凭什么插手？这是我们的事业12。” 唐· 柯里昂说，“ 这是我们自己的事业。我们管理自己的世界，因为这就是我们的世界，我们的事业。我们必须紧密团结，抵抗外来的干涉。否则他们就会给我们套上鼻环，就像他们已经给美国的另外几百万那不勒斯人和意大利人套上了鼻环一样。“为了这个原因，我愿意为儿子报仇，这是为了大家的利益。我现在发誓，只要我还负责指挥家族的行动，若是没有正当理由和遇到最激烈的挑衅，就连一个指头也不会举起来反对在座各位。我愿意为了共同利益牺牲我的商业利益。我发誓保证，以名誉保证，你们都清楚我从没有违背过誓言和名誉。“不过，我也有个自私的目的。因为受到索洛佐和那位警长的凶杀指控，我最小的儿子不得不逃跑。我必须安排他安全回国，洗清污名。这是我个人的事情，我会自己做些安排。也许我必须找到真凶，或者向政府证明他的无辜，也许证人和线人会撤回他们的谎言。可是，我还是要说，这是我个人的事情，我相信我能把我的儿子带回家。“但是，有句话我得说在前头。我是个迷信的人，这个毛病多么可笑，但我不得不说，要是什么倒霉的变故落在我的小儿子头上，要是某个警察不小心开枪打死他，要是他在牢房里上吊自杀，要是什么新证人冒出来证明他有罪，那迷信就会让我觉得这是因为在座有人还对我心怀恶意。再进一步说，假如我的儿子被雷劈了，我都会怪罪在座的某些人。要是他乘的飞机坠海，乘的船只沉入滚滚波涛，他得上致命的热病，汽车被火车撞了，迷信同样会让我归咎于在座某些人的恶意。各位先生，这种恶意，这种厄运，我可永远不会原谅。但除此之外，我愿意拿我孙子辈的灵魂起誓，我绝对不会打破我们缔结的和平。说到底，我们毕竟比那些双手沾满无数人类鲜血的领袖要好，不是吗？” 说完这些，唐· 柯里昂从他的位置顺着会议桌走向唐· 塔塔利亚的座位。塔塔利亚起身迎接他，两人拥抱，彼此亲吻面颊。房间里的其他唐鼓掌，见到谁都使劲握手，祝贺唐· 柯里昂和唐· 塔塔利亚新建立的友谊。这恐怕不是全世界最美好的友谊，他们不会互送圣诞礼物，但他们也不会彼此仇杀。在他们的世界里，这样的友谊就足够了，需要的也只是这样的友谊。</p>
<p>唉，老天应该允许每个人一辈子犯一次傻。</p>
<p>女人和孩子能够承担粗心大意的后果，男人却不行。</p>
<p>他的手底下是个活生生的器官，活生生的器官需要另外一个活生生的器官。</p>
<p>他第一次理解了意大利男人那闻名遐迩的嫉妒。此时此刻，要是有谁敢碰一下这女孩，妄图宣称拥有她，从他手里夺走她，他就会毫不犹豫杀死对方。他想占有她，就像吝啬鬼想占有金币那样疯狂，就像小佃农想拥有一片土地那样饥渴，想把她锁在房间里，囚禁她，只有他一个人能碰。</p>
<p>让朋友低估你的优点，让敌人高估你的缺点。</p>
<p>履行职责的人能获得恰当的奖赏。</p>
<p>你对你所爱的人不能随便说‘不’字，也不能常常说，这就是诀窍。当你说‘不’字时，你得把‘不’字说得听上去就像‘是’字一样悦耳。另一个办法就是你得设法让他们说‘不’字。你得耐心，还得不怕麻烦。不过，我是个老朽，你是新的时髦的一代，你不必听我这老一套。” 这就是说话的艺术，如同上面，你要跟他讲道理，让他无法拒绝，我想我的生命中缺少这个勇气，我不是很愿意违背朋友的愿望，但是有时却还是受到了伤害，我一直在学习如何说不，人善被人欺，所以我一直也在不断学，学会说，学会做人，我希望能把身边所谓我认为应该学的品质学会，那么那时，我也可以大声说不，这也是小说最能打动我的话，但我很早之前以前明白了他的道理，只是，我没在履行。</p>
<p>伟大的人不是生下来就伟大的，而是在成长过程中显示其伟大的。</p>
<p>今天做了什么</p>
<p>写了一个调用amazon’s api的脚本，根据输入的Searchindex的BrowseNodeId，得到当前SearchIndex的叶子节点。</p>
<p>今天学到了什么</p>
<p>今天下班的时候，脚本功能仍然没有实现，伟哥给我检查代码后，发现问题出在xpath的书写上，因为我<br>想当然<br>的认为数据是按照我所写的xpath提取出来的，所以问题迟迟没有解决。之后用命令空间对每个tag进行精确的定位后，问题得到了解决。这个问题是由于我的想当然导致的，同样没有对代码进行<br>Double check<br>也使得问题迟迟没有被发现。所以，以后写代码<br>不能想当然<br>，只有<br>通过Double check<br>的逻辑，才是可以开始实现的逻辑。</p>
<p>mac系统操作的简洁与高效比windows更适合开发，尽快的熟悉mac系统的操作，提高自己的工作效率。</p>
<p>同样的错误不要犯两次。</p>
<p>明天的计划<br>1.继续找车型数据库。<br>2.利用休息时间把mac上工作环境配置完善。<br>3.尽力完成好mentor的每一个要求。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当天完成的工作内容&lt;br&gt;1.写了xxx api&lt;br&gt;2.在xxx中修改了xx方法。&lt;br&gt;当天的收获&lt;br&gt;1.今天在fix Bug的时候，被卡住了很久。这个bug是之前xxxx代码中xxxx部分隐含的，今天在扩展功能的时候暴露了出来。刚开始碰到这个问题的时候，首先我在
    
    </summary>
    
    
      <category term="daily report" scheme="http://www.ganbinwen.com/tags/daily-report/"/>
    
  </entry>
  
  <entry>
    <title>2017-08-05 Report</title>
    <link href="http://www.ganbinwen.com/2017/08/05/2017-08-05/"/>
    <id>http://www.ganbinwen.com/2017/08/05/2017-08-05/</id>
    <published>2017-08-05T07:27:45.000Z</published>
    <updated>2017-11-04T09:51:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>当天完成的工作内容<br>1.筛选了一些反爬虫的API，找了可以实行的ip限制方案。<br>当天的收获<br>1.总结的问题： 英文能力弱，带来了很多的弊端，目前暴露出来的： 1.英文文档读起来费劲，但偏偏大部分优秀资源都没有中文版。2. 削弱了自己获取资源的能力，比如遇到问题想在stackoverflow求助一下，连问题都描述不了。<br>反思一下：</p>
<p>文档看不懂 –&gt; 单词不理解 ——&gt; 词汇量太少 –&gt; 一年没有背单词了，每次在词典中查完生词也只是标记一下，没有复习过。 –&gt; 没有背单词的习惯。</p>
<p>不能用英语表达问题 –&gt; 除了半年一次的英语考试，平时没有用英语写作过 –&gt; 平日缺少英文写作和表达的锻炼<br>总结：<br>1.因为对写作没有积极性 –&gt; 所以不自己写作，去翻译英文文档 –&gt; 每天翻译1段超过150个词的文档 –&gt; 但我惰性很大，没有人督促肯定坚持不下来 –&gt; 以后在daily report下写第五个点【今日翻译】，把今天翻译的原文和译文记录（不用帮我校正，只是为了强迫自己坚持下去） </p>
<p>我只想背我不会的生词 –&gt; 不打算买个词典一页一页开始背 –&gt; 每天在使用有道词典的时候，查阅完单词的同时mark一下 –&gt; 当天背当天查阅的单词 –&gt; 保持每天生词本是清空的 （查多少个，背多少个，数目不固定）<br>以上两个方法与daily report保持同步。</p>
<p>明天的计划<br>1.把Ip限制的方案落实。<br>提出疑问或寻求帮助<br>无。<br>今日翻译<br>A variant of this design replaces the register with tri-state buffers. The same logic used to load the register is used to enable the tri-state buffers instead. Although this can work for some designs, the output device must read in data while the buffers are enabled. Once they are disabled, the outputs of the buffers are tri-stated and the data is no longer available to the output device.<br>我的译文：<br>这个多样的设计替代了tri-state缓冲的寄存器。同样的逻辑被用来加载寄存器是过去被用来替代tri-state缓冲的。即使这个能够工作于同样的设计，外部设备必须要在缓存能用的时候可以读书数据。一旦它们失效，输出到缓冲会tri-stated而且数据不在对外部设备可用。<br>正确译文：<br>该设计也可以用三态缓冲器代替寄存器。装载寄存器的逻辑同样用于使能三态缓冲器。虽然对于某些设计这是可行的，但是输出设备必须在缓冲器有效时读入数据。一旦缓冲器被禁止，其输出就是三态，该数据也就不再能够供输出设备使用。<br>对于2017<br> 07<br> 17的daily report赵赵的回复。<br>这个总结不合格。</p>
<p>自己的问题，自己先问6次为什么（自己解答），然后再问别人。<br>你现在还是抓不住重点。</p>
<p>我描述你的问题是：问问题的时候描述太多<br>反思的原因是：</p>
<ol>
<li>抓不住重点</li>
<li>没有自己考虑周全</li>
</ol>
<p>那上面两个问题，分别的原因又是什么？ 自己回答之后，再问原因。<br>我上周已经告诉你了，先找到根本原因，在想action plan！<br>我告诉你N遍的方法，也带着你做过N遍了，你不照着实施，现在还要问我要方法？！</p>
<p>当天完成的工作内容<br>1.写了xxx api<br>2.在xxxx的函数里增加了xxxx的逻辑<br>当天的收获<br>1.对7月17提出的【如何去问问题】重新总结。<br>问题<br>：问问题时描述太多，太啰嗦。<br>原因<br>：</p>
<p>提问时抓不住问题的重点 –&gt; 提问之前，没有把问题的原因理解清楚 –&gt; 急于寻找答案，未能静下心思考 –&gt; 思维有惰性，希望答案可以不劳而获 –&gt; 依赖他人，独立解决问题的能力差</p>
<p>对问题考虑不全面 –&gt;  对问题的解决方案有遗漏 –&gt; 假设问题发生的情况时有遗漏 –&gt; 解决问题的方法不当，即没有用正确的方法在分析问题时保证尽可能完整清晰。</p>
<p>总结<br>：<br>因为原因2中包含了原因1，所以先对原因2总结action plan。</p>
<p>遇到问题 –&gt; 立刻把问题写在纸上（不可只在脑中思考） –&gt;  把问题用画二叉树的方式，把可能导致的原因逐层开始画出来 –&gt; 对上一步中画完的二叉树，用逻辑推理一遍，确定问题发生的原因已经出现在某个叶子节点上 –&gt; 如果没有任何叶子节点可以推断为导致问题发生的原因，那么问题的考虑必定有遗漏，继续思考或者此时寻求他人建议，并且将完成的二叉树给回答者看，让回答者尽快明确被卡住的原因。 –&gt; 如果二叉树的叶子节点中已经存在问题发生的原因 –&gt; 针对原因，思考问题的解决方案 –&gt; 利用目前可用的所有工具（google，man，document）去找到对应的答案 –&gt; 直到所有答案都被尝试或者找到了正确解决问题的答案为止，否则记录每一个答案不正确的原因，留作之后寻问他人时提供【目前已知的信息】。 （<br>以上每一步的过程必须有记录，绝不可以只在脑中完成。<br>）</p>
<p>如果1中的办法未能找到正确的答案 –&gt; 重复1并且每次结束后查阅记录信息 –&gt; 如果连续6次的记录信息都一样 –&gt; 表明一直被卡在了同一个地方 –&gt; 此时才可以寻问他人 –&gt; 如果重复1后每次的记录过程不一样，那么表明每次都有新的进展 –&gt; 应该继续静下心重复1直到问题解决或者6次的记录信息都相同，再寻问他人。</p>
<p>明天的计划<br>1.熟悉xxxx中xxxxx部分的架构，xxxxx，增加反爬虫机制。<br>提出疑问或寻求帮助<br>无。<br>当天完成的工作内容<br>1.fix了xxxxx中的重复任务和数据占用大量空间的问题。<br>当天的收获<br>1.今天总结的内容是在入职xxxxx前，赵赵就多次提醒我注意的问题–如何去问问题。<br>截止今日仍表现出来的问题：问问题时，<br>描述的太冗余了<br>，导致伟哥经常听完我的问题，第一句话就是：你在说什么。<br>反思：1.描述的冗余是因为我总是想把所有的细节都描述清楚，担心会遗漏某个细节，但事实反应出来的是描述的太多会让回答者找不到问题的重心，反而不利于沟通。2.问问题前没有将问题考虑详细，或者尽可能的先尝试独立解决后再去提问。有时候问了一个问题，伟哥立马反问我一句这个问题的原因是什么，我却答不上来。<br>总结：<br>1.提问前先尝试<br>独立解决<br>这个问题，如果是技术上的那么应该google/或者将相关文档阅读一遍后再去提问，如果是方向选择上的那么应该及时向伟哥寻求建议。<br>2.在提问时，<br>明确问题<br>，将自己<br>目前做的尝试<br>，已经<br>收集到信息<br>以及被<br>卡住的原因<br>告诉回答者。将问题变得<br>简单<br>，尽可能的将问题描述的简单易懂。<br>明天的计划<br>1.把xxxx中数据持久化部分的逻辑弄懂。<br>提出疑问或寻求帮助<br>对于我今天总结出来的提问方式（针对于我目前暴露出来的问题），我参考了赵赵之前发给我的资料。但总结不对之处或者有遗漏的地方，希望赵赵与伟哥不吝赐教。<br>当天完成的工作内容<br>1.给伟哥提供了几种解决【xxxx】的解决方案。<br>当天的收获<br>1.以下内容是当时整个问题的解决流程：<br>在思考【xxxxx】的解决方案的时候，我先在纸上写了一些方案发给伟哥，伟哥告诉我不要先急于寻找解决办法，先理解问题。果然我把方案按照逻辑理一遍后发现这些方案连问题的切入点都不对，没有一点意义。之后开始按照伟哥的建议先明白问题的发生原因。因为一开始把调度器也理解为队列，所以在阅读代码上逻辑总是有问题。又跟伟哥请教后，才明白只有一个队列，正确的读通代码后，理解了问题的原因。之后我开始明确目标：解决什么问题，问题怎么解决，有哪些可行方案，每种方案解决的核心是什么。我把这些要求都写在了纸上后开始思考思路，根据导致问题发生的两种情况，我分别写出了对应的方案，发给伟哥（不过伟哥在忙高创会），我接着把方案种的逻辑，替换目前代码中的逻辑，我发现目前代码中的逻辑有一些小问题，但是这不是导致问题xxxxxxxxx，而这里才是导致问题的主要原因。<br>以下是反思部分：<br>遇到问题，不要急于解决，要先明白为什么会有这个问题。不能明确问题的原因，不能定位问题的位置，不能定义好解决的目标，跳过这些阶段所做的思考和行动都是无用功。最后还是不能解决，还是要求助伟哥，这样解决问题的方法太失败了。<br>以下是总结部分：<br>遇到【xxxxx】 –》读一遍代码，理清代码逻辑 –》 知道xxxxx的， 用来对xxxx积存的任务做释放 –》 如果上一步中，代码逻辑不够清晰或者读不通，及时跟伟哥请教 –》 理清了代码逻辑后，拿出笔和纸，用mece把现在出现的问题分析一下 –》 worker执行的队列中有大量重复内容 –》 提出【传送的内容大量重复，没有逻辑对是否重复传送做检查】的假设 –》 验证假设 –》 在代码中加检查是否重复的逻辑 –》 如果检查内容是重复的则不发送，不重复才发送 –》 逻辑增加的过程中，发现代码已经有了检查逻辑，但是检查逻辑中存在bug，会导致仍然将重复内容发送 –》 把解决的方案交付给伟哥，让伟哥判断其是否有实践价值（伟哥让我先做到这一步与他沟通后再继续）。<br>明天的计划<br>1.等明天xxxx结束后再于伟哥进一步沟通，确认方案是否可行。<br>提出疑问或寻求帮助<br>无。<br>当天完成的工作内容<br>1.将基于xxxxx的xxx功能剥离出来单独实现。<br>2.思考了两种实现【xxxxxxx】这个功能的方案。<br>当天的收获<br>1.今天最大的收获就是参加了Jiachen的scrum培训！感觉太棒了！！<br>先来梳理一下scrum的四个核心理念：</p>
<p>以团队为核心</p>
<p>循环迭代交付</p>
<p>定期复盘调整</p>
<p>透明，暴露问题<br>明确了这四个理念和sprint的细节后，jiachen让我们开展了两个多小时的实践（超时了半个小时）。在一位小哥毛遂自荐成为了PO后，我们【暴暴队】配置就Ok了。第一轮的sprint，大家很混乱，不知道各自应该做什么，比较明显的问题就是PO在给成员介绍Backlogs的时候，没有介绍需要实现的目标和产出形式，只是一味的解释Backlogs。第二轮Sprint的过程中，大家吸取了第一轮的经验，对于每个Backlogs先明确产出，不过这个环节又太过于深挖细节，导致大量时间被消耗在了细节上，不仅如此，当大家开始领取Backlogs去TODO的时候，发现还有成员没有分配到任务！资源的浪费！虽然前面两轮过程很曲折，不过好在大家在review中及时发现错误，在第三轮中，在指定的时间内完成了任务。</p>
<p>通过今天的培训，我有几点感悟：</p>
<p>我认为在没有明确的目标和实现需求下的讨论，大部分的都是无收益的。</p>
<p>制定的目标要考虑当前资源和交付时间。事实上，完成讨论中出现的细节问题，那么就不可能按时交付，这样深挖细节反而背离了讨论的本质。讨论应该是为了更简单有效的解决问题，而不是将问题变得越来越复杂，导致大家最后都认为无法实现。</p>
<p>及时的review就是及时的止损，将错误最快的解决，沿着正确的方向进行到底。</p>
<p>最后一点是我认为导致今天发生的几个问题的最主要的原因，<br>PO职责的履行不到位<br>，PO在团队中的作用真的非常非常重要！PO职责的不到位会让团队变得非常混乱，大家的方向不能得到统一，那么还谈什么效率呢？当然今天的PO是随机选的，大家之前都没有经验，不过也正因为如此，才将这一问题暴露的特别明显。</p>
<p>明天的计划<br>1.思考【xxxx】的其余实现思路。<br>2.思考有没有办法解决xxxxx系统中，每xxxxx秒进行一次xxxx带来的弊端。<br>提出疑问或寻求帮助<br>无。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当天完成的工作内容&lt;br&gt;1.筛选了一些反爬虫的API，找了可以实行的ip限制方案。&lt;br&gt;当天的收获&lt;br&gt;1.总结的问题： 英文能力弱，带来了很多的弊端，目前暴露出来的： 1.英文文档读起来费劲，但偏偏大部分优秀资源都没有中文版。2. 削弱了自己获取资源的能力，比如遇到
    
    </summary>
    
    
      <category term="daily report" scheme="http://www.ganbinwen.com/tags/daily-report/"/>
    
  </entry>
  
  <entry>
    <title>2017-08-04 Report</title>
    <link href="http://www.ganbinwen.com/2017/08/04/2017-08-04/"/>
    <id>http://www.ganbinwen.com/2017/08/04/2017-08-04/</id>
    <published>2017-08-04T07:27:45.000Z</published>
    <updated>2017-11-04T09:51:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>当天完成的工作内容<br>1.add relation_tree api<br>2.update compare api<br>当天的收获<br>1.今天的总结是： 规范开发流程<br>2.问题： 写的relation_tree api，因为没有考虑上线后会出现的异常，导致提交的代码没有健壮性。<br>3.反思：<br>为什么写的代码没有健壮性？ –&gt; 因为只考虑了如何实现功能，没有考虑异常情况下功能的影响，开发前没有考虑极端情况 –&gt; 为什么只考虑实现功能但是不考虑异常情况和极端值呢？ –&gt; 因为没有考虑到功能脚本和线上真正可以使用的功能的差距 –&gt; 为什么没有认识到这样的差距? –&gt; 因为从一开始的开发流程就出现了错误，导致思考不到这样的差距 ——&gt; 开发流程出错在哪里了呢？ ——&gt; 对于开发功能之前，没有给需要实现的功能明确的保证，如输出的格式，输入的数据类型输入的值等等，没有这些明确规范功能的测试用例。<br>4.总结：<br>规范需要实现的功能 –&gt; 检查输入数据的类型 –&gt; 对输入的数据考虑极值情况，比如数值型，那么1和1.0是否影响功能结果要进行测试 –&gt; 输入数据检查通过后开始写功能 –&gt; 功能<br>中不仅要正常的实现，而且要考虑性能，比如APi是否可以接受以分钟为单位的实现 –&gt; 如果性能存在问题，那么这个问题是必须要解决的，这次relation_tree 因为多次对数据库的操作，导致实现时间是分钟为单位的 –&gt; 首先减少数据库操作次数，把查询上万次变成了查询一次 –&gt; 用空间换时间，在实现的过程中，用dict做映射 –&gt; 性能从30分钟变成了10S中，大大的优化了速度。 –&gt; 性能问题解决后，要考虑异常情况 –&gt; 程序在出错的过程中，在try里面使其恢复原有功能同时打印log日志便于修复，我在缓存中的Try里，取消从redis中读数数据，而是调函数得到数据。这样使得异常也可以返回正常数据（不过要消耗十秒钟的时间） ——&gt; 异常解决后，功能才算是完成了。<br>概括内容：<br>问题： 代码健壮性差。<br>反思： 开发流程有问题，没有规范的开发方法。<br>总结的方法： 从输入类型一直到输出结果，类型检查要明确，考虑性能问题，以及异常问题，极端情况，用测试用例来驱动开发。<br>但是我还是没有把方法中的对应步骤总结完善（还没操作过这个方法，细节上把握不太清楚），我打算周末尝试驱动测试开发一个实例后，再次总结这个问题（把细节总结好，实例和总结的连接我会贴在下次的daily report上）<br>明天的计划<br>1.写好开发功能前需要通过的步骤清单，周一贴在桌子上。<br>提出疑问或寻求帮助<br>无。<br>今日翻译<br>These I/O interfaces are fine for small computers, such as the microwave oven controller, but they suffer from poor performance in larger computer systems. In all but the smallest systems, it is not acceptable for the CPU to have to wait thousands of clock cycles for data from an I/O device. Many systems use interrupts so they can perform useful work while waiting for the much slower I/O devices.<br>我的翻译<br>这些I/O接口对小型计算机很适用，比如微博烤炉控制器，但是它们在更大一点的计算机上表现的很差。在所有系统中最小的系统里，它不被CPU接受,因为不得不等待上千次的时钟循环去从一个I/O设备中取数据。许多系统使用中断器，所以他们可以在等待慢得多的I/O设备时有效的工作。<br>正确译文<br>这些I/O接口对于小型的计算机而言已经很好了，比如说微波炉控制器，但是在大型的计算机系统中它们的性能则很差。在除最小系统以外的所有系统中，让CPU等待成千上万个时钟周期方从I/O设备中得到数据是不能接收的，为此，许多系统都使用了中断机制,以便CPU在等待慢得多的I/O设备时，可以执行其他有用的工作。<br>当天完成的工作内容<br>1.api/relation_tree<br>当天的收获<br>1.问题: 如何快速理解sql代码及写sql<br>2.目标: 逻辑清晰的逐步完成复杂的sql<br>3.反思：今天要在原有的SQL里再增加一层内连接，但是我一直不理解SQL的业务逻辑。 –&gt; 首先我没有把SQL格式化，SQL非常混乱难以阅读 –&gt; 用在线工具格式化后，SQL逻辑清晰 –&gt; 但是我仍然阅读存在问题，因为我读SQL是从前往后读 –&gt; 伟哥纠正我SQL要从内层向外层读 –&gt; 从内向外读后，逻辑清晰，很快可以明白SQL的意思，但是不理解业务逻辑的含义 –&gt;<br>因为业务逻辑不仅需要明白SQL的意思，还要对照表里，去明白每一次的连接后得到的数据。根据数据的对比去思考业务逻辑。<br>4.方法：遇到SQL代码 –&gt; formmater sql –&gt; 从内至外的逐层阅读代码 –&gt; 每一层阅读完，先核对数据的变化 –&gt; 从变化中，思考业务逻辑。<br>5.用总结的方法重新处理一遍今天遇到的问题：<br>原来的SQL:<br>select left(t2.published_at,7) month, count(<em>) as value from (select d.asin as parent_asin from (SELECT distinct coalesce(parent_asin_id, id) as parent_asin_id from amazon_review_insight.amazon_amazonasin WHERE %s ) c inner join amazon_review_insight.amazon_amazonasin d on c.parent_asin_id = d.id ) t1 inner join amazon_review_insight.amazon_amazonreview t2 on t1.parent_asin = t2.parent_asin where left(t2.published_at,7)&gt;=’2011-01’ group by left(t2.published_at,7)<br>Frommater后：<br>SELECT left(t2.published_at,7) MONTH,<br>                               count(</em>) AS value<br>FROM<br>  (SELECT d.asin AS parent_asin<br>   FROM<br>     (SELECT DISTINCT coalesce(parent_asin_id, id) AS parent_asin_id<br>      FROM amazon_review_insight.amazon_amazonasin<br>      WHERE %s ) c<br>   INNER JOIN amazon_review_insight.amazon_amazonasin d ON c.parent_asin_id = d.id) t1<br>INNER JOIN amazon_review_insight.amazon_amazonreview t2 ON t1.parent_asin = t2.parent_asin<br>WHERE left(t2.published_at,7)&gt;=’2011-01’<br>GROUP BY left(t2.published_at,7)<br>从内到外的阅读：<br>1.根据where的条件，得到parent_asin_id后同D表根据c.parent_asin_id = d.id做连接，select d.asin。此时对比一下得到的数据（parent_asin）和之前的数据（parent_asin_id），明白了这次的逻辑是为了取parent_asin。将得到的表命名t1，再次同amazon_amazonreview根据t1.parent_asin = t2.parent_asin做连接。再根据MONTH&gt;=’2011-01’的条件，对得到的数据按照月份分组后聚合。得到了月份和对应的value值。对比现在的数据（月份和对应的数量）和之前的数据（parent_asin），明白了业务逻辑是取parent_asin对应的月份和数量。<br>明天的计划<br>1.在SQL里面嵌套一层Category的连接。<br>2.帮公司同事完成OBD的数据爬取。<br>提出疑问或寻求帮助<br>无。<br>今日翻译<br>Most CPUs have a control input signal called READY (or something similar). Normally this input is high. When the CPU outputs the address of the I/O device and the correct control signals, enabling the tri-state buffers of the I/O device interface, the I/O device sets READY low. The CPU reads this signal and continues to output the same address and control signals, which cause the buffers to remain enabled. In the hard disk drive example, the drive rotates the disk and positions its read heads until it reads the desired data.<br>我的译文<br>大多数的CPU都有一个叫做READY（或者别的）的输入控制信号。通常这个输入是高，当CPU输出地址和正确的控制信号到I/O设备，I/O设备接口的三态缓冲使用的时候，I/O设备会设置READY为低。CPU读取这个信号然后继续去输出相同的地址和控制信号，这些会让缓冲保持能用。用硬盘驱动举例，驱动转动磁盘然后指向磁头的位置直到它可以读取应该被读取的数据。<br>正确译文<br>大多数CPU都有一个控制输入信号，叫做就绪信号（READY）（或其他意思相近的名称），通常它为高电平。当CPU输出某I/O设备的地址和正确的控制信号，促使I/O设备接口的三态缓冲器有效时，该I/O设备置READY信号为低电平。CPU读取这一信号，并且继续输出同样的地址信号和控制信号，使缓冲器保持有效。在硬盘驱动器的例子中，此时驱动器旋转磁头，并且定位读写头，直到读到想要要的数据为止。<br>当天完成的工作内容<br>1.avatar目前的tag_service的准确率和召回率不高，对其中存在的问题做了分析。根据网上提供的资料表示词形还原会比词干抽取（avatar的做法）效果更好。pattern的表现很差，目前在网上找了一些开源的pattern api打算跟项目中的作对比。<br>当天的收获<br>1.总结的内容是： 如何用最短的时间找到靠谱的api？<br>2.需求： 在工作中，对原有的功能进行优化或者fix bug的时候，希望用最短的时间来完成任务 –&gt; 如果自己去造轮子，目前我的能力连代码中未优化的轮子都造不出来 –&gt; 那么只能去网上寻找资源 –&gt; 网上的资源非常多，google，github，stackoverflow，技术博客 等等 –&gt; 那么如何有效的从这些资源里，快速找到我所需要的呢？ –&gt; 虽然遇到问题，用Google查找是Ok的。但是google出来的，有时候需要看很久的英文资料，而且看完了资料后发现所提供的工具并不合适我的要求 –&gt; 那么现在根据近期记录的搜索方案，整理一下技巧。<br>3.查找方法的总结：<br>先分析一下问题 –&gt; 1.如果现在是要fix bug，那么跳过Google,直接在stackoverflow上面查找。2.现在需要的是优化已有的功能，同样跳过google，直接在Github把功能描述出来，看看是不是已经存在可以满足需求的轮子了 –&gt; 如果上面两个问题都没有找到解决办法，其实不一定是目前没有可用的轮子，而是我对问题或者需求没有理解清楚 –&gt; 重新跟伟哥确认一下需求或者问题 –&gt; 重复上述步骤 –&gt; 如果已经找到了解决方案，那么先把方案跟伟哥确认一下可行性之后开始执行 –&gt; 如果没有解决方案，那么说明目前确实没有成熟的轮子合适需求，这时候开始Google，找解决问题的思路，了解完思路后绝对不要去手写代码，此时一定要把想到的思路去Github和技术博客中找轮子或者教程。 –&gt; 把轮子或者教程看明白后再开始动手写代码。<br>概括上述内容：<br>1.需求： fix Bug或者优化已有功能。<br>2.目标： 用最少的时间去找到合适的轮子/fix bug。<br>3.方法： 先分析问题，不同的问题，第一步尝试有区别。fix bug先stackoverflow，优化功能先去Github找轮子。 对细节上不懂得地方先Google。有了思路后可以去相关的技术博客里找教程（今天在coolshell里找到了一片文本挖掘的教程。） –&gt;  动手前先跟伟哥沟通好，确认方案有可行性再写代码。<br>明天的计划<br>1.用词形还原提取的Tag跟目前avatar的做对比，择优选择。<br>2.熟悉patter api后，用到avatar上。<br>提出疑问或寻求帮助<br>无。<br>今日翻译<br>I/O devices are much slower than CPUs and memory. For this reason, they can have timing problems when interacting with the CPU. To illustrate this, consider what happens when a CPU wants to read data from a disk. It may take the disk drive several milliseconds to position its heads properly to read the desired value. In this time, the CPU could have read in invalid data and fetched, decoded, and executed thousands of instructions.<br>I/O设备比cpu和内存要慢很多。因为这个原因，它们和cpu相互作用的时候会有时间问题。为了阐明这个现象，思考一下当cpu想要从磁盘里读数据的时候会发生什么。它会用几毫秒的时间驱动到磁盘头的位置，去读取所希望的正确数据。这时候，cpu可能会无效的数据可能会被读取、抓取、解码或者执行上千次指令.<br>I/O设备比CPU和存储器慢得多。基于这个原因，当它们与CPU交互时，就可能存在时序上的问题。为了说明这一点，考虑当CPU想要从硬盘中读取数据时会发生的情况，这可能要消耗磁盘驱动器几个毫秒来正确的定位磁头，以便读取想要的数值，而在这段时间里，CPU可能已经读入了不正确的数据，并且读取、译解和执行了成千上万条指令。<br>当天完成的工作内容<br>1.x。<br>当天的收获（简要概括在后面）<br>1.今天总结的主题是：我在回答别人问题时1.急于回答而不是思考2.回答的答案不是最简洁的语言。<br>问题阐述： 今天赵赵问了我几个问题：1.这周的工作完成了哪些内容？2.ip check耗时多久？3.完成ip check中浪费了多久的时间？4.你有没有想过下次遇到这样的问题，如何去节约时间？<br>我的回答:1.完成了一些Bug的修复，具体的忘记了。记得是给ip做rate的限制，定制白名单，修复网上提供的api…..巴拉巴拉一大堆。2.ip check用了两天半的时间，其中因为修复一些问题和选择合适的api用了时间3.我昨天晚上思考了一下，我大概浪费了半天的时间。（具体怎么浪费的我没描述出来）。4.我下次遇到这样的问题，我又把遇到的问题描述了一遍 然后继续巴拉巴拉一大堆…..（后面赵赵不愿再听了，伟哥也在旁边提醒我问题先思考一下再说）<br>上面是今天回答问题的过程，接下来反思这个过程，并且重新回答一次。<br>反思： 为什么回答每一个问题，答案不仅冗余而且还不准确 –&gt; 说话没有把握重点，想描述细节，但是细节与问题无关 –&gt; 为什么没有用简单的语言说出重点 –&gt; 因为问题我还没有思考完，我就开始回答了 –&gt; 为什么问题不考虑完就要回答？ –&gt; 有一点思路我就想要回答，但是完整的思考过程还没有结束（回答第三个问题的时候，我一想到我昨晚有思考怎么解决，我就开始回答了，可是答完这一句，还没有回忆起来计划怎么去解决的。回答的时候就断档了） –&gt; 为什么有一点思路就想要回答，却不能听完整个问题，并且回答前把答案整理好再说出来？ –&gt; 思维太分散，问题是A,我在思考A的时候想要开始回答，可是回答A的时候又想到了B,我就开始想说B,说B的时候又想到了C,就这样一直循环下去，脑子里面思考的早已经不是A了，A的部分只思考了一点，没有完整思考，所以只回答了一点点。 –&gt; 为什么思维分散？ –&gt; 因为我不强迫自己只思考A,我想到什么我就说什么，思维不严谨 –&gt; 所以应该强迫思考完A再开始回答。只思考与A有关的，不要先考虑别的问题。对于与A无关的一律断舍离。<br>目标是什么：<br>要做到完整的听完问题后，把问题思考明白，然后再开始回答。不再发生跳逻辑，不再回答与问题无关的内容。<br>方法：<br>完整的听完问题 –&gt; 在脑中把问题重复几遍 ——&gt; 如果对问题有不理解的地方，先问清楚 –&gt; 确保问题已经听明白了 –&gt; 思考问题的答案 –&gt; 如果思考突然跳转到别的地方，立刻重复问自己问题是什么，确保思考的过程只与问题有关。但可以把跳转到的想法先放心里，但是不要去思考。 –&gt; 问题思考完后，不要先关心答案对不对，先把答案告诉自己，看看能不能与问题对上号 –&gt; 如果答案与问题完全相关，再回答 –&gt; 如果思考偏了，跟对方请求一下再考虑一会。 –&gt; 回答的时候，在心中默念问题 –&gt; 只回答与问题有关的内容，无关的话不要说出来。 –&gt; 等对方确认你的回答没有问题后，这次回答的过程算作结束，否则跟对方明确沟通中的问题出现在哪，继续重复上面过程。<br>实践总结的方法重新回答赵赵的问题：<br>1.这周的工作完成了哪些内容？ 回答: 修复了Avatar中，爬虫会将同一个任务多次重复的Bug。在爬虫模块中增加了清理占用空间的方法，清理已经被使用过的100多G数据。在后端做了Ip check功能。<br>2.ip check耗时多久？ 回答： 从周三下午开始到周五上午交付，耗时两个工作日。其中在完成这个功能时，别的部门同事委托我去爬取OBD数据，花费了数个小时。所以实际耗时一天半。<br>3.完成ip check中浪费了多久的时间？ 回答：我觉得有浪费近半天的时间，这半天的时间我去阅读了几个Api的源码想要优化实现ip check，但是实现Ip check只要看看范例，不需要阅读源码。<br>4.你有没有想过下次遇到这样的问题，如何去节约时间？ 回答：先把功能实现，优化应该在功能实现后去做而不是功能实现前。<br>简要概括：<br>问题：回答别人的提问时，回答冗余，并且逻辑混乱<br>方法：听完后问题，不明白的地方先沟通清楚，再开始思考，只思考与问题有关的内容，并且逻辑要是有明确因果关系，不能跳逻辑。问什么，答什么，不说问题无关内容。<br>目标：完整的听完别人问题后，能做到思考完再开始回答。回答时，只回答与问题相关内容。<br>明天的计划<br>1.最近了解了GFW的原理，打算用github上的项目，自己去实现翻墙。<br>提出疑问或寻求帮助<br>无。<br>今日翻译<br>Bald men are perceived to be more dominant, more athletic and better leaders, researchers have claimed.<br>A new study from information management lecturer Albert Mannes at the University of Pennsylvania’s Wharton School of Business suggests that while men with male-pattern baldness tend to view themselves as having poor self-esteem, those who take the pre-emptivestep of shaving a thinning head of hair improved their image.<br>我的译文<br>研究人员声称秃顶的男人被认为的更有统治力，更加健壮并且是更好的领导。<br>来自宾夕法尼亚的沃顿商学院的商人Albert Mannes有新的研究，表明当男性秃头的时候倾向于在意他们脆弱的自尊心，顶着光秃秃的头的能提高他们的想象力。<br>正确译文<br>研究人员称，人们普遍认为秃头男更具主导力、更健壮、领导能力更强。<br>美国宾夕法尼亚大学沃顿商学院的信息管理系讲师阿尔伯特 曼尼斯开展的一项新研究指出，尽管谢顶男子往往会因为脱发而感到自卑，但那些在头发掉光前就先行一步剃光头的男人形象则会有所改观。<br>当天完成的工作内容<br>1.给avatar的后端服务器加了Ip的rate限制。<br>当天的收获<br>1.今天晚上在公司听了饿了么开发人员的培训，主题是关于rust语言的，但这不是重点。重点是在过程中我觉得作为一个技术人员，却听不懂他和其他技术人员的谈话，这是一件令人沮丧的事情。<br>问题：眼界低，技术视野很窄。<br>反思：为什么同样是技术人员，别人聊的内容我完全不理解 –&gt; 1.聊得内容，我未曾听过。2.他们谈论的问题我没有考虑过 –&gt; 技术眼界很低（我观察到公司很多人github上是非常活跃的，而我却连github都用不熟练） –&gt;  明明知道Github，技术博客，源码，官方文档是很重要的，但是我在这上面下的功夫少之又少 –&gt; 平日对技术探索浅尝辄止，不愿走出舒适区(比如今天他们聊得泛型，这个概念一个星期前我在看技术博客的时候有看到，但是到今天我都没有去了解它) –&gt; 惰性让我看到舒适区以外的陌生技术，就想着逃避 –&gt; 没有强迫自己去拓展技术栈<br>总结：<br>首先不能相信自己的自制力（我是大懒蛋，我没有自制力） –&gt; 做可以被记录的事情，来让自己的技术扩展，但是平日的时间很紧凑，碎片时间比较多 –&gt; 碎片时间看github，周一到周五每天star至少一个项目 –&gt; 不要求自己去看源码，但是一定要给至少给一个项目star，为了多了解新技术或者有创意的idea。 （截止2017年7月20日我有50个star项目。）<br>翻译英文文档和读技术博客是为了补足基础知识 –&gt; 翻译文档已经每天写在daily report里，但是技术博客没有定义好记录方式（不记录，我就会偷懒） –&gt; 保持跟coolshell发布技术博客同步跟新， 他们写一篇技术博客，我当天就写一篇读后感发布到我的博客上（到时候我会把地址留在daily report的最后，不必帮我校正，我只是想督促自己），当然如果发布的是技术类的，那必须写，如果他们发布一篇鸡汤文，可以选择不写。<br>千万不要再相信自己的自制力，我已经让自己失望了N次。任何方法我都要有记录形式。<br>明天的计划<br>1.修改github上ratelimit api，使其更好的贴合avatar。<br>提出疑问或寻求帮助<br>无。<br>今日翻译<br>The load logic plays the role of the enable logic in the input device interface. When this logic receives the correct address and control signals, it asserts the LD signal of the register, causing it to read data from the system’s data bus. The output device can then read the data from the register at its leisure while the CPU performs other tasks.<br>我的译文<br>在输入设备接口中加载逻辑扮演着功能实现逻辑。当这个逻辑接受到正确地址和控制信号。它就会断言寄存器的LD信号。这是因为它从系统数据枢纽中读取信息。当CPU执行其他任务的时候，外部设备在其空闲的时间从寄存器中读取数据。<br>正确译文<br>装载逻辑发挥着输入设备接口中使能逻辑的作用。当此逻辑获得正确的地址信号和控制信号后，它发出寄存器的LD信号，促使它从系统数据总线上读取数据。然后输出设备可以在其空闲的时候从寄存器中读取该数据，同时CPU可以执行其他的任务</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当天完成的工作内容&lt;br&gt;1.add relation_tree api&lt;br&gt;2.update compare api&lt;br&gt;当天的收获&lt;br&gt;1.今天的总结是： 规范开发流程&lt;br&gt;2.问题： 写的relation_tree api，因为没有考虑上线后会出现的异常，导致
    
    </summary>
    
    
      <category term="daily report" scheme="http://www.ganbinwen.com/tags/daily-report/"/>
    
  </entry>
  
  <entry>
    <title>2017-08-03 Report</title>
    <link href="http://www.ganbinwen.com/2017/08/03/2017-08-03/"/>
    <id>http://www.ganbinwen.com/2017/08/03/2017-08-03/</id>
    <published>2017-08-03T07:27:45.000Z</published>
    <updated>2017-11-04T09:19:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>当天完成的工作内容<br>1.update compare api to handle cache problem<br>2.add refresh_relation_tree commands.<br>当天的收获<br>1.问题： 前天爬取edmunds的数据库的时候写过一段Insert 的SQL，但是表里的字段有50多个，我写的SQL逐个复制了五十多个字段，非常的麻烦。<br>2.反思： 如果五十个多个字段，有改动，那么又要重新粘贴，而且参数检查也非常的麻烦 –&gt;<br>怎么让参数简洁，便于改动呢？ –&gt; 用Orm，写一个数据对象，爬虫解析Html标签的时候，直接赋值，赋值结束后直接commit，这样就避免了写一条五十多个参数的SQL语句。<br>3.方法： 我先去看了sqlalchemy这个支持orm操作的库 –&gt; 学习了简单的增删改查的使用 –&gt; 修改原来的代码中数据库的部分 –&gt; 可以直接save了，但是处理数据的部分就在爬虫的同时完成了，这不符合scrapy的设计哲学 –&gt; scrapy 的爬虫部分应该是只负责爬取数据，数据的持久化应该由pipeline去完成，而不是直接在爬虫部分做完。 –&gt; 所以碰到了新的问题，如何把sqlalchemy的操作在Pipeline里完成。<br>今日只解决了sql参数的问题，但是新的问题未解决。 明晚的总结来写新的问题。<br>明天的计划<br>1.edmunds只抓取了New car的data，数据还不够，明天找找used car的数据接口。<br>提出疑问或寻求帮助<br>无。<br>今日翻译<br>Before numbers are converted from one number base to another, the digits of a number system must be understood. Early in our education, we learned that a decimal, or base 10, number was constructed with 10 digits: 0 through 9. The first digit in any numbering system is always a zero. For example, a base 8 (octal) number contains 8 digits: 0 through 7; a base 2 (binary) number contains 2 digits: 0 and 1.<br>我的翻译<br>在一个数字从基于某一数字的另一个数字转换之前，必须要理解数字的系统。在我们教育的早期，我们学习到十进制，或者基于10，数字会被转换成10个数字： 0-9，第一个数字在其他任何数字系统里都是一个0.举个例子，八进制的系统里有8个数字：0-7， 基于二进制的数字里包含2个数字： 0-1<br>正确翻译<br>将数从—种数制向另一种数制转换之前，必须了解数的计数系统。在早期教育中，我们已学习了十进制数，或以10为基的数，它由10个数字组成：0到9。任何计数制的第一个数字总是零，这种规则适用于任何其他数制。例如，以8为基的数(八进制)包含8个数字：0到7，而以2为基的数(二进制)包含2个数字：0和1。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当天完成的工作内容&lt;br&gt;1.update compare api to handle cache problem&lt;br&gt;2.add refresh_relation_tree commands.&lt;br&gt;当天的收获&lt;br&gt;1.问题： 前天爬取edmunds的数据库的时候写过
    
    </summary>
    
    
      <category term="daily report" scheme="http://www.ganbinwen.com/tags/daily-report/"/>
    
  </entry>
  
  <entry>
    <title>2017-08-02 Report</title>
    <link href="http://www.ganbinwen.com/2017/08/02/2017-08-02/"/>
    <id>http://www.ganbinwen.com/2017/08/02/2017-08-02/</id>
    <published>2017-08-02T07:27:45.000Z</published>
    <updated>2017-11-04T09:19:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>当天完成的工作内容<br>1.解决了403和302的问题，爬取了edmunds下new car configurations(目前抓取的接口只有new car)。<br>2.跟前端沟通后修改了compare api。<br>当天的收获<br>1.问题： 由于之前使用的mysql库不支持Python3.x，今天第一次使用了MysqlDB这个库。使用这个库的时候，我觉得既然执行相同的功能，但是每次因为使用的工具不同就需要重新学习一次新的工具，这样的学习效率太低了。<br>2.方法：我认为这种弊端应该存在解决的方法 –&gt; 我找了资料，发现对于RDBMS有统一的DB-API –&gt; 我学习了异常类和常用的属性，比如connect()函数对象中user,password,host,database,dsn。cursor()对象中close(),execute(),fetchall()等等。 –&gt; 把DB-api看完后，对于更换使用RDBMS的库，学习成本非常的低，因为这些接口使用起来是一样的。<br>3.总结：  对于执行相同功能的库，一个一个的去学习话效率很低，应该直接在Python官网上，学习对应的底层API,这样在工具更换时，学习成本很低，能够举一反三。<br>明天的计划<br>1.解决修改后的compare api会在生产环境中碰到的问题。<br>提出疑问或寻求帮助<br>无。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当天完成的工作内容&lt;br&gt;1.解决了403和302的问题，爬取了edmunds下new car configurations(目前抓取的接口只有new car)。&lt;br&gt;2.跟前端沟通后修改了compare api。&lt;br&gt;当天的收获&lt;br&gt;1.问题： 由于之前使用的mys
    
    </summary>
    
    
      <category term="daily report" scheme="http://www.ganbinwen.com/tags/daily-report/"/>
    
  </entry>
  
  <entry>
    <title>2017-08-01 Report</title>
    <link href="http://www.ganbinwen.com/2017/08/01/2017-08-01/"/>
    <id>http://www.ganbinwen.com/2017/08/01/2017-08-01/</id>
    <published>2017-08-01T07:27:45.000Z</published>
    <updated>2017-11-04T09:19:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>当天完成的工作内容<br>1.crawled car informations and configurations from edmunds.<br>当天的收获<br>1.问题： 今天跟学长（小超）在后端返回的数据格式上有争议，他希望我给每个child都加上parent_id的数据，但是我认为parent_id既然可以遍历获取到就没有必要让每个child都重复加上了。<br>2.反思： 为什么学长希望我加上一段数据呢？ ——&gt; 因为前端对于我返回的数据格式处理有点麻烦，希望我简化一下 –&gt; 为什么我不愿意修改呢？ –&gt; 其实不是怕麻烦的原因，我很愿意帮学长加上，不过我认为如果加上数据会导致parent_id的重复次数会等于其子节点的数量。而且parent_id即使不加上也是可以通过遍历得到的。 –&gt; 那我是如何跟学长沟通的呢？ –&gt; 我的沟通很差劲，1.因为这份数据是我提供的，我可能比学长更清楚一点数据如何使用。但是我没有换位思考，没有理解学长 2.虽然我认为没有必要修改，但是我却没有给学长提供一份可行的解决方案，导致问题的解决没有进展。3.前端的问题太复杂的时候，后端要帮忙简化问题，要互相帮助。<br>4.目标： 合作中遇到问题时，能帮对方解决问题。<br>3.总结： 1.换位思考 –&gt; 从对方了解到的信息和他的解决思路考虑，先明白他的想法，再去沟通 –&gt; 学长认为要加parent_id的原因，是因为获取到child_id的时候得不到parent_id。 –&gt; 按照他的想法，确实是得不到Parent_id的，也确实加上Parent_id直接获取会更方便些。 –&gt; 明白了他的需求后，考虑有没有比他提供的解决思路更好的办法 –&gt; 我觉得可以在遍历的child的时候，在循环里加上parent_id=当前Id，因为遍历当前节点的id可以默认为是父亲节点，也可以用得到的parent_id和child_id做多对一或者一对多的映射，这样用child_id就可以直接得到parent_id了。 –&gt; 先跟告诉对方我的解决方案，让对方看看这个方案是不是更合适，如果我想到的可行方案都不能work –&gt; 那么直接按照对方的思路去做，我去在后端加上Parent_id。 –&gt; 如果能work，那么问题得到解决。 –&gt; 最后伟哥给学长提了用栈的思路，在前端解决了这个问题。不需要后端的变动。（当时学长告诉我的问题是得不到parent_id，所以我觉得映射就可以了，而用栈是针对于实际碰到的问题的解决方法）<br>明天的计划<br>1.解决edmuds访问过快会403的问题。<br>提出疑问或寻求帮助<br>无。<br>今日翻译<br>The use of the microprocessor requires a working knowledge of binary, decimal, and hexadecimal numbering systems. This section provides a background for those who are unfamiliar with number systems. Conversions between decimal and binary, decimal and hexadecimal, and binary and hexadecimal are described.<br>我的翻译<br>使用微型处理器需要有二进制，十进制和十六进制的数字系统的工作知识。这个层面提供一个背景给那些不熟悉数字系统的人。描述在十进制和二进制，十进制的十六进制，二进制和十六进制的转换。<br>正确翻译<br>使用微处理器需要掌握二进制、十进制和十六进制数制系统的基本知识，本节为那些不熟悉数制系统的读者提供这方面的背景知识。说明了十进制与二进制之间、十进制与十六进制之间，及二进制与十六进制之间的转换。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当天完成的工作内容&lt;br&gt;1.crawled car informations and configurations from edmunds.&lt;br&gt;当天的收获&lt;br&gt;1.问题： 今天跟学长（小超）在后端返回的数据格式上有争议，他希望我给每个child都加上parent_
    
    </summary>
    
    
      <category term="daily report" scheme="http://www.ganbinwen.com/tags/daily-report/"/>
    
  </entry>
  
  <entry>
    <title>2017-07-31 Report</title>
    <link href="http://www.ganbinwen.com/2017/07/31/2017-07-31/"/>
    <id>http://www.ganbinwen.com/2017/07/31/2017-07-31/</id>
    <published>2017-07-31T07:27:45.000Z</published>
    <updated>2017-11-04T09:19:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>当天完成的工作内容<br>1.找了一些车型数据库，但是数据与目前所需的不匹配。<br>2.规划了对于edmunds的爬虫策略。<br>当天的收获<br>1.问题： 周五总结的方法，细节上没有阐述清楚，难以执行。<br>2.反思： 方法应该要思考到每一步明确做什么，而不仅仅是怎么做。<br>3.方法： 我拟了一份开发功能时需要注意的细节清单，在开发过程中遇到问题，及时添加进去。反复迭代这份清单。<br>4.细节清单：<br>写代码前</p>
<p>写代码的要思考到明确<br>做什么<br>，而不仅仅是<br>怎么做<br>。</p>
<p>先Google,gitHub看看有没有已经成熟的思路，先找资源。</p>
<p>把问题拆分到可以直接去思考做法的程度，画树，逐层写方法。</p>
<p>文件操作</p>
<p>操作文件时候，写路径的时候要用os模块操作，千万要避免文件换了一个位置就会出错的问题。</p>
<p>数据结构</p>
<p>注意可变对象和不可变对象（list和dict），防止做参数时被污染。</p>
<p>数据操作部分，先明确数据结构。能用Tuple解决的不用List，同时要注意Dict读数据是的时候是无序的。</p>
<p>对数据集有操作，一定要用Set，合集，交集，差集，补集。</p>
<p>检查需要</p>
<p>先检查输入类型，用isinstance去限定所需要的数据类型。</p>
<p>输入数据是Int，考虑变成float会怎么样。List,string,dict为空时都默认等于false。</p>
<p>数据库的操作是否已经最少了，如果不是最少的话，尝试用Innerjoin 连接出数据，避免多次查询。</p>
<p>节约资源的方法</p>
<p>reduce，map，filter三个内置函数，返回的都是生成器。节约开销，能用时尽量用。</p>
<p>数据库操作</p>
<p>对数据库操作，不要再用mysql这个库，用sqlachemy，兼容2和3，同时可以用Orm来操作数据库。</p>
<p>对数据库操作的函数，如果可以写缓存，尽量用Redis做缓存，避免Mysql的查询。</p>
<p>尽量不要用Where这种隐形连接，用Inner Join这种显性连接。</p>
<p>对数据库有操作，要用log记录下来，以便数据恢复使用。</p>
<p>错误处理</p>
<p>死循环，给第一行print，第二行continue。</p>
<p>5.上周计划完成的自动化脚本，我写了一个可以快捷复制的工具。便于工作中复制一些重复的参数。<br><a href="https://github.com/Miksztowi/CorePython/blob/master/auto_copy.py" target="_blank" rel="external">https://github.com/Miksztowi/CorePython/blob/master/auto_copy.py</a><br>这个只能在Mac py3.x的环境下work,我计划这周Update跨平台以及兼容2.x，add快捷键的功能<br>明天的计划<br>1.如果在edmunds和JATO申请的APi没有通过，就开始爬取edmunds的数据。<br>2.如果通过了，那么根据Api直接获取我们所需的数据。<br>提出疑问或寻求帮助<br>无。<br>今日翻译<br>These I/O interfaces are also not suited to large data transfers. In the systems in this chapter, each byte of data transferred between an I/O device and memory must pass through the CPU. This is inefficient for many common operations, such as loading a program from disk into memory. Direct memory access, DMA, is a method used to bypass the CPU in these transfers, thus performing them much more quickly.<br>我的翻译<br>这些I/O接口也不太适合大型数据传输。在这个部分的系统中，每个在I/O设备和内存间传输的数据字节都必须要通过CPU。这个对很多普通的操作是无效的，比如从内中磁条中加载程序。直接内存连接，DMA是一种方法用来错开这些传输的CPU,因此程序必须运行快一点。<br>正确翻译<br>这些I/O接口也不适合大量的数据传输。在本章的系统中，I/O设备和存储器之间传输的每一个字节都必须通过CPU，这对于许多常见的操作（例如从磁盘向主机存装载一个程序）来说效率低下。直接存储器访问就是在数据传输中绕过CPU的一种方法，因此执行起来速度很快。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当天完成的工作内容&lt;br&gt;1.找了一些车型数据库，但是数据与目前所需的不匹配。&lt;br&gt;2.规划了对于edmunds的爬虫策略。&lt;br&gt;当天的收获&lt;br&gt;1.问题： 周五总结的方法，细节上没有阐述清楚，难以执行。&lt;br&gt;2.反思： 方法应该要思考到每一步明确做什么，而不仅仅是
    
    </summary>
    
    
      <category term="daily report" scheme="http://www.ganbinwen.com/tags/daily-report/"/>
    
  </entry>
  
  <entry>
    <title>2017-07-28 Report</title>
    <link href="http://www.ganbinwen.com/2017/07/28/2017-07-28/"/>
    <id>http://www.ganbinwen.com/2017/07/28/2017-07-28/</id>
    <published>2017-07-28T07:27:45.000Z</published>
    <updated>2017-11-04T09:19:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>当天完成的工作内容<br>1.add relation_tree api<br>2.update compare api<br>当天的收获<br>1.今天的总结是： 规范开发流程<br>2.问题： 写的relation_tree api，因为没有考虑上线后会出现的异常，导致提交的代码没有健壮性。<br>3.反思：<br>为什么写的代码没有健壮性？ –&gt; 因为只考虑了如何实现功能，没有考虑异常情况下功能的影响，开发前没有考虑极端情况 –&gt; 为什么只考虑实现功能但是不考虑异常情况和极端值呢？ –&gt; 因为没有考虑到功能脚本和线上真正可以使用的功能的差距 –&gt; 为什么没有认识到这样的差距? –&gt; 因为从一开始的开发流程就出现了错误，导致思考不到这样的差距 ——&gt; 开发流程出错在哪里了呢？ ——&gt; 对于开发功能之前，没有给需要实现的功能明确的保证，如输出的格式，输入的数据类型输入的值等等，没有这些明确规范功能的测试用例。<br>4.总结：<br>规范需要实现的功能 –&gt; 检查输入数据的类型 –&gt; 对输入的数据考虑极值情况，比如数值型，那么1和1.0是否影响功能结果要进行测试 –&gt; 输入数据检查通过后开始写功能 –&gt; 功能<br>中不仅要正常的实现，而且要考虑性能，比如APi是否可以接受以分钟为单位的实现 –&gt; 如果性能存在问题，那么这个问题是必须要解决的，这次relation_tree 因为多次对数据库的操作，导致实现时间是分钟为单位的 –&gt; 首先减少数据库操作次数，把查询上万次变成了查询一次 –&gt; 用空间换时间，在实现的过程中，用dict做映射 –&gt; 性能从30分钟变成了10S中，大大的优化了速度。 –&gt; 性能问题解决后，要考虑异常情况 –&gt; 程序在出错的过程中，在try里面使其恢复原有功能同时打印log日志便于修复，我在缓存中的Try里，取消从redis中读数数据，而是调函数得到数据。这样使得异常也可以返回正常数据（不过要消耗十秒钟的时间） ——&gt; 异常解决后，功能才算是完成了。<br>概括内容：<br>问题： 代码健壮性差。<br>反思： 开发流程有问题，没有规范的开发方法。<br>总结的方法： 从输入类型一直到输出结果，类型检查要明确，考虑性能问题，以及异常问题，极端情况，用测试用例来驱动开发。<br>但是我还是没有把方法中的对应步骤总结完善（还没操作过这个方法，细节上把握不太清楚），我打算周末尝试驱动测试开发一个实例后，再次总结这个问题（把细节总结好，实例和总结的连接我会贴在下次的daily report上）<br>明天的计划<br>1.写好开发功能前需要通过的步骤清单，周一贴在桌子上。<br>提出疑问或寻求帮助<br>无。<br>今日翻译<br>These I/O interfaces are fine for small computers, such as the microwave oven controller, but they suffer from poor performance in larger computer systems. In all but the smallest systems, it is not acceptable for the CPU to have to wait thousands of clock cycles for data from an I/O device. Many systems use interrupts so they can perform useful work while waiting for the much slower I/O devices.<br>我的翻译<br>这些I/O接口对小型计算机很适用，比如微博烤炉控制器，但是它们在更大一点的计算机上表现的很差。在所有系统中最小的系统里，它不被CPU接受,因为不得不等待上千次的时钟循环去从一个I/O设备中取数据。许多系统使用中断器，所以他们可以在等待慢得多的I/O设备时有效的工作。<br>正确译文<br>这些I/O接口对于小型的计算机而言已经很好了，比如说微波炉控制器，但是在大型的计算机系统中它们的性能则很差。在除最小系统以外的所有系统中，让CPU等待成千上万个时钟周期方从I/O设备中得到数据是不能接收的，为此，许多系统都使用了中断机制,以便CPU在等待慢得多的I/O设备时，可以执行其他有用的工作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当天完成的工作内容&lt;br&gt;1.add relation_tree api&lt;br&gt;2.update compare api&lt;br&gt;当天的收获&lt;br&gt;1.今天的总结是： 规范开发流程&lt;br&gt;2.问题： 写的relation_tree api，因为没有考虑上线后会出现的异常，导致
    
    </summary>
    
    
      <category term="daily report" scheme="http://www.ganbinwen.com/tags/daily-report/"/>
    
  </entry>
  
  <entry>
    <title>2017-07-26 Report</title>
    <link href="http://www.ganbinwen.com/2017/07/26/2017-07-26/"/>
    <id>http://www.ganbinwen.com/2017/07/26/2017-07-26/</id>
    <published>2017-07-26T07:27:45.000Z</published>
    <updated>2017-11-04T09:19:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>当天完成的工作内容<br>1.扩展了compare api，跑了几份category的数据给伟哥。<br>2.帮同事爬取了OBD的数据。<br>当天的收获<br>1.今天总结的内容是： 如何避免做重复的工作。<br>2.问题： 在工作中有时候会碰到做重复或者之前做过的任务（指的是机械性的任务）<br>先举个重复任务的例子，在测试代码功能的时候，有时候涉及到Docker环境，镜像需要重新编译。每次写完代码，就需要手动一个一个的先删除原有的镜像，然后再编译镜像，再打tag，之后上传镜像。这是完全重复的工作，而且完成功能需要测试很多次，这样机械的任务完全应该被避免。<br>3.反思： 做重复的任务是人人都会碰到的事情，为什么我会把它当做是一个问题呢？ –&gt; 因为我很懒，看到任务是之前做过的，头很大。 –&gt; 那如何去解决重复的任务，但是不要消耗同样的时间呢？ –&gt; 优化方法，使得这一次比上一次完成更快吗？（手速更快的删除镜像？） –&gt; 机械性的任务完成的再快时间还是浪费了 –&gt; 那如何使得机械性任务一次完成，以后每次碰到了，都不需要再去耗费精力？ –&gt; 机械性的写代码，就应该让电脑去完成 –&gt; 写自动化脚本去完成。 –&gt; 那为什么知道了自动化脚本可以完成，我还是屡屡的去做重复的任务呢？ –&gt; 因为第一次碰到这个任务，是不知道之后还会重复做的；然后再次碰到了，因为有解决经验了所以这时候完成起来要比去写个脚本轻松的多。 –&gt; 恶性循环导致问题始终不会被解决 –&gt; 如何终止这个循环？ –&gt; 区分一下任务属性，对于明显会重复的任务，应该第一次就编写自动化脚本。对于不确定会重复的任务，在碰到的第二次就开始写脚本。对于明显不会重复的任务，只需要完成一次即可的，完全没必要去讲究代码健壮性，要追求快速完成。<br>方法：<br>碰到任务，先区分一下任务属性： 如果任务是机械性的，而且接下来工作中明显会再次碰到的（定性为每测试一次就要删除一次镜像的此类任务），第一次就要写好脚本。如果任务不确定接下来会不会再次碰到（定性为使用Avatar的某个api，每次手动给数据），给数据的时候，不要复制粘贴，要用测试脚本去使用这个APi的功能。 –&gt; 此时用删除镜像举例，确定需要写脚本（脚本在业余时间完成） –&gt; 先在网上找停止容器，删除镜像等的命令，docker stop<br> docker rmi <em><br> –&gt; </em>部分是不能写固定，使用脚本的时候传进去 –&gt; 之后用SHELL脚本去自动运行这些命令，完成这样的自动化功能。<br>概括总结内容：<br>问题： 工作时会碰到重复的机械任务。<br>目标： 避免重复的机械任务。<br>反思： 重复做机械任务，没有意义而且浪费精力。 需要写个自动化脚本来代替我完成这样的任务。<br>总结： 先定性任务，把明确要重复做的任务，第一次做时就写好脚本。先把相关命令都写好，然后用SHELL整理成自动化的脚本。<br>（在这周结束前，用shell把avatar的镜像操作写好，到时候把连接贴在daily report上）<br>明天的计划<br>1.优化返回类目关系树的性能，把compare api跟前端把数据格式沟通好，完成这两个功能，提交到GitHub上。<br>提出疑问或寻求帮助<br>无。<br>今日翻译<br>I love choices.<br>I love to walk around in bookstores not because I can buy all the books, but because I could buy one book, and I have so many to choose from.<br>I like buffets.<br>I rarely get to go to them, but when I do,<br>the first thing I do is walk around and see what the choice are.<br>I also like the internet.<br>It seems like cyberspace really doesn’t have any limits.<br>There are so many things to discover— like space.<br>Sometimes, I think we don’t appreciate the freedom that we have.<br>We are free to make many different choice.<br>From the food we eat— to the places we visit— to the people we meet— to the classes we take and on and on and on.<br>But freedom has dangers. If misused, it can be harmful.<br>I could pile a mountain of food on my plate and NOT to eat it.<br>It would be a waste. But that’s a choice I have.<br>The Internet has dangers, too.<br>If parents are not careful and don’t supervise what their kids can see— well kids can lose some of their innocence because of freedom.<br>There’s a reason for legal age limits when it comes to driving, gambling, drinking,somking, and voting.<br>Until we reach that age, we aren’t free to do those things.<br>我的翻译<br>我爱选择<br>我爱在书店里散步，不是因为我可以买所有的书，而是我可以买一本书。我有很多的选择。<br>我爱自助餐。<br>我很少去吃自助餐，不过当我这么做的时候，我第一件要做的事情就是环绕四周看看有什么事可以选择的。<br>我也爱互联网。<br>这大概是因为网络空间没有任何限制吧。<br>这有太多的东西去探索，比如空间。<br>有时候，我认为我们不会感谢我们拥有的自由。<br>我们没有代价去做许多不同的选择。<br>我们吃的食物，我们参观的地方，我们约会的人，我们去上的课，如此反复。<br>但是自由存在危险，如果滥用，它就会伤害你。<br>我可以堆积山一样的食物在我的盘子里，但是不去吃它。<br>这可能会浪费，但这是我拥有的权利。<br>互联网也同样有危险。<br>如果父母不小心或者监督他们的孩子，孩子会因为自由失去他们的天真无邪。这是法定年龄限制当他们去开车，赌博，喝酒，抽烟时的原因。<br>直到我们到了年纪，我们就不在没有代价的去做这些事情了。<br>我爱选择。<br>我喜欢在书店里徜徉，不是因为我能买下所有的书，<br>而是因为我可以买一本书，我有这么多的选择。<br>我还喜欢自助餐。<br>虽然我很少去，但是当我去的时候，<br>我做的第一件事就是四处逛逛，看看有什么选择。<br>我还喜欢互联网。<br>看来网络真的没有任何限制。<br>有这么多的东西等待发——比如空间。<br>有时候，我觉得我们不喜欢我们拥有的自由。<br>我们可以自由地做出许多不同的选择。<br>从我们所吃的食物到我们去的地方，我们见的人，我们所上的课程等等。<br>但自由也有危险。如果滥用，将会带来危害。<br>我可以将山一样的食物堆在我的盘子里，而我则不去吃它。<br>它会是一种浪费。但这是一个选择。<br>互联网也有危险。<br>如果父母对他们的孩子所看到的不留神也不监督，那么孩子们会因为自由而失去一些他们的无辜的。<br>当涉及驾车、赌博、酗酒、吸烟、和投票时法律会有年龄的限制。<br>直到我们到了那个年岁，否则我们去做那些事将不会被赋予自由。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当天完成的工作内容&lt;br&gt;1.扩展了compare api，跑了几份category的数据给伟哥。&lt;br&gt;2.帮同事爬取了OBD的数据。&lt;br&gt;当天的收获&lt;br&gt;1.今天总结的内容是： 如何避免做重复的工作。&lt;br&gt;2.问题： 在工作中有时候会碰到做重复或者之前做过的任务（
    
    </summary>
    
    
      <category term="daily report" scheme="http://www.ganbinwen.com/tags/daily-report/"/>
    
  </entry>
  
</feed>
